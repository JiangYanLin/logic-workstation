{"version":3,"file":"js/app-legacy.b1e7210c.js","mappings":"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","sources":["webpack://logic-workstation/./src/App.vue?2a31","webpack://logic-workstation/./src/App.vue?facb","webpack://logic-workstation/./src/App.vue","webpack://logic-workstation/./src/views/LogicTool.vue?1b3d","webpack://logic-workstation/./src/logic/string-order.js","webpack://logic-workstation/./src/logic/well-formed.js","webpack://logic-workstation/./src/logic/compiler.js","webpack://logic-workstation/./src/logic/assignment.js","webpack://logic-workstation/./src/logic/assignment-creator.js","webpack://logic-workstation/./src/logic/CoveragesChooser.js","webpack://logic-workstation/./src/logic/minterm.js","webpack://logic-workstation/./src/logic/coverage.js","webpack://logic-workstation/./src/logic/coverage-creator.js","webpack://logic-workstation/./src/logic/minterm-creator.js","webpack://logic-workstation/./src/logic/coverage-well-formed-convertor.js","webpack://logic-workstation/./src/logic/minterm-well-formed-convertor.js","webpack://logic-workstation/./src/logic/well-formed-simplifier.js","webpack://logic-workstation/./src/logic/true-table.js","webpack://logic-workstation/./src/logic/well-formed-util.js","webpack://logic-workstation/src/views/LogicTool.vue","webpack://logic-workstation/./src/views/LogicTool.vue?f23b","webpack://logic-workstation/./src/views/LogicTool.vue","webpack://logic-workstation/./src/router/index.js","webpack://logic-workstation/./src/store/index.js","webpack://logic-workstation/./src/main.js","webpack://logic-workstation/webpack/bootstrap","webpack://logic-workstation/webpack/runtime/chunk loaded","webpack://logic-workstation/webpack/runtime/compat get default export","webpack://logic-workstation/webpack/runtime/define property getters","webpack://logic-workstation/webpack/runtime/ensure chunk","webpack://logic-workstation/webpack/runtime/get javascript chunk filename","webpack://logic-workstation/webpack/runtime/get mini-css chunk filename","webpack://logic-workstation/webpack/runtime/global","webpack://logic-workstation/webpack/runtime/hasOwnProperty shorthand","webpack://logic-workstation/webpack/runtime/load script","webpack://logic-workstation/webpack/runtime/make namespace object","webpack://logic-workstation/webpack/runtime/publicPath","webpack://logic-workstation/webpack/runtime/jsonp chunk loading","webpack://logic-workstation/webpack/startup"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('nav',[_c('router-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"逻辑公式化简与真值表\")]),_vm._v(\" | \"),_c('router-link',{attrs:{\"to\":\"/about\"}},[_vm._v(\"使用说明\")])],1),_c('keep-alive',[_c('router-view')],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=d5fcbae4&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',[_c('input',{directives:[{name:\"model\",rawName:\"v-model.lazy\",value:(_vm.input),expression:\"input\",modifiers:{\"lazy\":true}}],attrs:{\"id\":\"formula_input\",\"type\":\"text\"},domProps:{\"value\":(_vm.input)},on:{\"change\":function($event){_vm.input=$event.target.value}}}),_c('button',{attrs:{\"id\":\"formula_submit\"},on:{\"click\":_vm.submitFormula}},[_vm._v(\"确定\")])]),_c('div',{attrs:{\"id\":\"formula_show\"}},[_c('div',[_vm._v(\"识别到公式：\"+_vm._s(_vm.wellFormedUtil.formulaString()))]),_c('div',[_vm._v(\"最简合取式：\"+_vm._s(_vm.wellFormedUtil.simplifiedConjunctionString()))]),_c('div',[_vm._v(\"最简析取式：\"+_vm._s(_vm.wellFormedUtil.simplifiedDisjunctionString()))])]),_c('div',[(_vm.wellFormedUtil.trueTableShowAble())?_c('div',[_c('div',[_vm._v(\"原始真值表\")]),_c('table',{staticClass:\"true_table\"},[_vm._l((_vm.wellFormedUtil.trueTable.head),function(th){return _c('th',[_vm._v(_vm._s(th))])}),_vm._l((_vm.wellFormedUtil.trueTable.body),function(tr){return _c('tr',_vm._l((tr),function(td){return _c('td',[_vm._v(_vm._s(td))])}),0)})],2)]):_c('div',[_vm._v(\" 原始真值表过长，请参考以下简化的真值表： \")]),_c('div',[_c('div',[_vm._v(\"简化的真值表\")]),_c('table',{staticClass:\"true_table\"},[_vm._l((_vm.wellFormedUtil.simplifiedTrueTable.head),function(th){return _c('th',[_vm._v(\" \"+_vm._s(th)+\" \")])}),_vm._l((_vm.wellFormedUtil.simplifiedTrueTable.body),function(tr){return _c('tr',_vm._l((tr),function(td){return _c('td',[_vm._v(\" \"+_vm._s(td)+\" \")])}),0)})],2)])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","class StringOrder {\r\n    stringIndexMap = new Map();\r\n    stringArray = [];\r\n\r\n    get length() {\r\n        return this.stringArray.length;\r\n    }\r\n\r\n    push(value) {\r\n        if (this.stringIndexMap.has(value)) {\r\n            return false;\r\n        }\r\n        let length = this.stringArray.push(value);\r\n        this.stringIndexMap.set(value, length - 1);\r\n        return true;\r\n    }\r\n\r\n    pushAll(stringOrder) {\r\n        stringOrder.stringArray.forEach(string => this.push(string));\r\n    }\r\n\r\n    getIndexOf(value) {\r\n        return this.stringIndexMap.get(value);\r\n    }\r\n\r\n    getValueOf(index) {\r\n        return this.stringArray[index];\r\n    }\r\n}\r\n\r\nexport {StringOrder}\r\n\r\n\r\n/*test getIndexOf getValueOf\r\nlet order = new StringOrder();\r\norder.push('abc');\r\norder.push('bcd');\r\norder.push('cde');\r\nconsole.log('abc', order\r\n    .getIndexOf('bcd'));\r\nconsole.log(2, order.getValueOf(2))\r\n//test getIndexOf getValueOf*/","import {StringOrder} from \"@/logic/string-order\";\r\n\r\nclass WellFormed {\r\n    date = {\r\n        atomicPropositionOrder: undefined\r\n    }\r\n\r\n    get atomicPropositionOrder() {\r\n        if (this.date.atomicPropositionOrder !== undefined) {\r\n            return this.date.atomicPropositionOrder;\r\n        } else {\r\n            return this.date.atomicPropositionOrder = this.getDefaultAtomicPropositionOrder();\r\n        }\r\n    }\r\n\r\n    set atomicPropositionOrder(value) {\r\n    }\r\n\r\n    inverse() {\r\n        return new Negation(this).inward();\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    inward() {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    toString() {\r\n        throw 'need implementation';\r\n    }\r\n}\r\n\r\nclass True extends WellFormed {\r\n    static instance = new True();\r\n\r\n    constructor() {\r\n        super();\r\n        if (True.instance !== undefined) {\r\n            return True.instance;\r\n        }\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        return new StringOrder();\r\n    }\r\n\r\n    inverse() {\r\n        return new False();\r\n    }\r\n\r\n    inward() {\r\n        return new True();\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return true;\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return 'true';\r\n    }\r\n\r\n    toString() {\r\n        return 'true';\r\n    }\r\n}\r\n\r\nclass False extends WellFormed {\r\n    static instance = new False();\r\n\r\n    constructor() {\r\n        super();\r\n        if (False.instance !== undefined) {\r\n            return False.instance;\r\n        }\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        return new StringOrder();\r\n    }\r\n\r\n    inverse() {\r\n        return new True();\r\n    }\r\n\r\n    inward() {\r\n        return new False();\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return false;\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return 'false';\r\n    }\r\n\r\n    toString() {\r\n        return 'false';\r\n    }\r\n}\r\n\r\nclass AtomicProposition extends WellFormed {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        order.push(this.name);\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return this;\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return assignment.get(this.name);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return this.name;\r\n    }\r\n\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\n\r\nclass Negation extends WellFormed {\r\n    constructor(item) {\r\n        super();\r\n        this.item = item;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        return this.item.atomicPropositionOrder;\r\n    }\r\n\r\n    inverse() {\r\n        return this.item.inward();\r\n    }\r\n\r\n    inward() {\r\n        switch (this.item.constructor) {\r\n            case True:\r\n                return new False();\r\n            case False:\r\n                return new True();\r\n            case AtomicProposition:\r\n                return this;\r\n            case Negation:\r\n                return this.item.item.inward();\r\n            case Conjunction:\r\n                return new Disjunction(...this.item.conjuncts.map(conjunct => conjunct.inverse()));\r\n            case Disjunction:\r\n                return new Conjunction(...this.item.disjuncts.map(disjunct => disjunct.inverse()));\r\n            case Implication:\r\n                return new Disjunction(new Negation(this.item.antecedent), this.item.consequent).inverse();\r\n            case IFF:\r\n                return new Conjunction(new Implication(this.item.condition1, this.item.condition2), new Implication(this.item.condition2, this.item.condition1)).inverse();\r\n            default:\r\n                throw 'negation inward error';\r\n        }\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return !this.item.boolFunction(assignment);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        if (wellFormed instanceof Negation || this.item instanceof AtomicProposition) {\r\n            return this.toString();\r\n        }\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return `¬${this.item.toStringInside(this)}`;\r\n    }\r\n}\r\n\r\nclass Conjunction extends WellFormed {\r\n    constructor(...conjuncts) {\r\n        super();\r\n        //debug\r\n        if (conjuncts.length < 2) {\r\n            throw 'conjunction create error';\r\n        }\r\n        //debug*/\r\n        this.conjuncts = conjuncts;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        this.conjuncts.forEach(conjunct => {\r\n            order.pushAll(conjunct.atomicPropositionOrder);\r\n        })\r\n        return order;\r\n    }\r\n\r\n\r\n    inward() {\r\n        return new Conjunction(...this.conjuncts.map(conjunct => conjunct.inward()));\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return !this.conjuncts.some(conjunct => !conjunct.boolFunction(assignment));\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return this.conjuncts.map(conjunct => conjunct.toStringInside(this)).join('∧');\r\n    }\r\n}\r\n\r\nclass Disjunction extends WellFormed {\r\n    constructor(...disjuncts) {\r\n        super();\r\n        //debug\r\n        if (disjuncts.length < 2) throw'disjunction create error';\r\n        //debug*/\r\n        this.disjuncts = disjuncts;\r\n    }\r\n\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        this.disjuncts.forEach(disjunct => {\r\n            order.pushAll(disjunct.atomicPropositionOrder);\r\n        });\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return new Disjunction(...this.disjuncts.map(disjunct => disjunct.inward()));\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return this.disjuncts.some(disjunct => disjunct.boolFunction(assignment));\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return this.disjuncts.map(disjunct => disjunct.toStringInside(this)).join('∨');\r\n    }\r\n\r\n}\r\n\r\nclass Implication extends WellFormed {\r\n    constructor(antecedent, consequent) {\r\n        super();\r\n        this.antecedent = antecedent;\r\n        this.consequent = consequent;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        order.pushAll(this.antecedent.atomicPropositionOrder);\r\n        order.pushAll(this.consequent.atomicPropositionOrder);\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return new Implication(this.antecedent.inward(), this.consequent.inward());\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return !this.antecedent.boolFunction(assignment) || this.consequent.boolFunction(assignment);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.antecedent.toStringInside(this)}→${this.consequent.toStringInside(this)}`;\r\n    }\r\n\r\n    toDisjunction() {\r\n        return new Disjunction(new Negation(this.antecedent), this.consequent);\r\n    }\r\n}\r\n\r\nclass IFF extends WellFormed {\r\n    constructor(condition1, condition2) {\r\n        super();\r\n        this.condition1 = condition1;\r\n        this.condition2 = condition2;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        order.pushAll(this.condition1.atomicPropositionOrder);\r\n        order.pushAll(this.condition2.atomicPropositionOrder);\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return new IFF(this.condition1.inward(), this.condition2.inward());\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return this.condition1.boolFunction(assignment) === this.condition2.boolFunction(assignment);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.condition1.toStringInside(this)}↔${this.condition2.toStringInside(this)}`;\r\n    }\r\n\r\n    toConjunction() {\r\n        return new Conjunction(new Implication(this.condition1, this.condition2), new Implication(this.condition2, this.condition1));\r\n    }\r\n}\r\n\r\nexport {WellFormed, True, False, AtomicProposition, Negation, Conjunction, Disjunction, IFF, Implication}\r\n\r\n\r\n//import compiler from \"@/logic/formula/compiler\";\r\n/*test toString\r\nlet true_ = compiler.parse('true');\r\nconsole.log(true_.toString());\r\nlet f = compiler.parse('false');\r\nconsole.log(f.toString());\r\nlet and = compiler.parse('(a and b) and c');\r\nconsole.log(and.toString());\r\nlet or = compiler.parse('a or (b or c)');\r\nconsole.log(or.toString());\r\nlet andor = compiler.parse('a or b and c or d');\r\nconsole.log(andor.toString());\r\nlet imp = compiler.parse('a -> b');\r\nconsole.log(imp.toString());\r\nlet iff = compiler.parse('a <-> b');\r\nconsole.log(iff.toString());\r\nlet not = compiler.parse('not (a <-> b)');\r\nconsole.log(not.toString());\r\n//test toString*/\r\n\r\n/*test inward inverse\r\nlet true_ = compiler.parse('true');\r\nconsole.log(true_.inverse().toString());\r\nlet f = compiler.parse('false');\r\nconsole.log(f.inverse().toString());\r\nlet and = compiler.parse('(a and b) and c');\r\nconsole.log(and.inverse().toString());\r\nlet or = compiler.parse('a or (b or c)');\r\nconsole.log(or.inverse().toString());\r\nlet andor = compiler.parse('a or b and c or d');\r\nconsole.log(andor.inverse().toString());\r\nlet imp = compiler.parse('a -> b');\r\nconsole.log(imp.inverse().toString());\r\nlet iff = compiler.parse('a <-> b');\r\nconsole.log(iff.inverse().toString());\r\nlet not = compiler.parse('not (a <-> b)');\r\nconsole.log(not.inverse().toString());\r\nlet inward = compiler.parse('not not a');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('(not a and not (c and d))');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('(not a or not not (c or d))');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('not(a-> b)');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('not(a<->not b)');\r\nconsole.log(inward.inward().toString());\r\n//test inward inverse*/\r\n\r\n/*test atomicProposition\r\nlet test = compiler.parse('a');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a and b and c or b');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a or b and c');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a -> b and c');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a <-> b and c');\r\nconsole.log(test.atomicPropositionOrder);\r\nlet order1 = test.atomicPropositionOrder;\r\ntest = compiler.parse('a');\r\ntest.atomicPropositionOrder = order1;\r\nconsole.log(test.atomicPropositionOrder);\r\nconsole.log(test.atomicPropositionOrder);\r\nconsole.log(test.atomicPropositionOrder);\r\n//test atomicProposition*/\r\n\r\n/*test boolFunction\r\nimport {AssignmentCreator} from \"@/logic/assignment-creator\";\r\n\r\nlet test = compiler.parse('a and b or c -> not (d<->e) ');\r\nlet assignmentCreator = new AssignmentCreator(test.atomicPropositionOrder);\r\nlet assignment = assignmentCreator.createAssignmentFromIntValue(20);\r\nconsole.log(test.boolFunction(assignment));\r\n//test boolFunction*/","import {\n    True, False, AtomicProposition, Negation, Conjunction, Disjunction, IFF, Implication\n} from '@/logic/well-formed';\n\nvar compiler = (function () {\n    var o = function (k, v, o, l) {\n            for (o = o || {}, l = k.length; l--; o[k[l]] = v) ;\n            return o\n        }, $V0 = [1, 6], $V1 = [1, 7], $V2 = [1, 8], $V3 = [1, 4], $V4 = [1, 5], $V5 = [1, 9], $V6 = [1, 10], $V7 = [1, 11],\n        $V8 = [1, 12], $V9 = [1, 9, 10, 11, 12, 14], $Va = [1, 14];\n    var parser = {\n        trace: function trace() {\n        },\n        yy: {},\n        symbols_: {\n            \"error\": 2,\n            \"p\": 3,\n            \"identifier\": 4,\n            \"true\": 5,\n            \"false\": 6,\n            \"exp\": 7,\n            \"﹁\": 8,\n            \"→\": 9,\n            \"↔\": 10,\n            \"∨\": 11,\n            \"∧\": 12,\n            \"(\": 13,\n            \")\": 14,\n            \"res\": 15,\n            \"$accept\": 0,\n            \"$end\": 1\n        },\n        terminals_: {\n            2: \"error\",\n            4: \"identifier\",\n            5: \"true\",\n            6: \"false\",\n            8: \"﹁\",\n            9: \"→\",\n            10: \"↔\",\n            11: \"∨\",\n            12: \"∧\",\n            13: \"(\",\n            14: \")\"\n        },\n        productions_: [0, [3, 1], [3, 1], [3, 1], [7, 1], [7, 2], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [15, 1]],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n            /* this == yyval */\n\n            var $0 = $$.length - 1;\n            switch (yystate) {\n                case 1:\n                    this.$ = new AtomicProposition($$[$0]);\n                    break;\n                case 2:\n                    this.$ = new True();\n                    break;\n                case 3:\n                    this.$ = new False();\n                    break;\n                case 5:\n                    this.$ = new Negation($$[$0]);\n                    break;\n                case 6:\n                    this.$ = new Implication($$[$0 - 2], $$[$0]);\n                    break;\n                case 7:\n                    this.$ = new IFF($$[$0 - 2], $$[$0]);\n                    break;\n                case 8:\n\n                    let disjuncts = [];\n                    if ($$[$0 - 2] instanceof Disjunction && $$[$0 - 2].enclosed === undefined) {\n                        $$[$0 - 2].disjuncts.forEach(disjunct => {\n                            disjuncts.push(disjunct);\n                        });\n                    } else {\n                        disjuncts.push($$[$0 - 2]);\n                    }\n                    if ($$[$0] instanceof Disjunction && $$[$0].enclosed === undefined) {\n                        $$[$0].disjuncts.forEach(disjunct => {\n                            disjuncts.push(disjunct);\n                        });\n                    } else {\n                        disjuncts.push($$[$0]);\n                    }\n                    this.$ = new Disjunction(...disjuncts);\n\n                    break;\n                case 9:\n\n                    let conjuncts = [];\n                    if ($$[$0 - 2] instanceof Conjunction && $$[$0 - 2].enclosed === undefined) {\n                        $$[$0 - 2].conjuncts.forEach(conjunct => {\n                            conjuncts.push(conjunct);\n                        });\n                    } else {\n                        conjuncts.push($$[$0 - 2]);\n                    }\n                    if ($$[$0] instanceof Conjunction && $$[$0].enclosed === undefined) {\n                        $$[$0].conjuncts.forEach(conjunct => {\n                            conjuncts.push(conjunct);\n                        });\n                    } else {\n                        conjuncts.push($$[$0]);\n                    }\n                    this.$ = new Conjunction(...conjuncts);\n\n                    break;\n                case 10:\n                    $$[$0 - 1].enclosed = true;\n                    this.$ = $$[$0 - 1];\n                    break;\n                case 11:\n                    return this.$ = $$[$0];\n                    break;\n            }\n        },\n        table: [{3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 2, 8: $V3, 13: $V4, 15: 1}, {1: [3]}, {\n            1: [2, 11], 9: $V5, 10: $V6, 11: $V7, 12: $V8\n        }, o($V9, [2, 4]), {3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 13, 8: $V3, 13: $V4}, {\n            3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 14, 8: $V3, 13: $V4\n        }, o($V9, [2, 1]), o($V9, [2, 2]), o($V9, [2, 3]), {\n            3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 15, 8: $V3, 13: $V4\n        }, {3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 16, 8: $V3, 13: $V4}, {\n            3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 17, 8: $V3, 13: $V4\n        }, {3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 18, 8: $V3, 13: $V4}, o($V9, [2, 5]), {\n            9: $V5, 10: $V6, 11: $V7, 12: $V8, 14: [1, 19]\n        }, o($Va, [2, 6], {11: $V7, 12: $V8}), o($Va, [2, 7], {\n            11: $V7, 12: $V8\n        }), o([1, 9, 10, 11, 14], [2, 8], {12: $V8}), o($V9, [2, 9]), o($V9, [2, 10])],\n        defaultActions: {},\n        parseError: function parseError(str, hash) {\n            if (hash.recoverable) {\n                this.trace(str);\n            } else {\n                var error = new Error(str);\n                error.hash = hash;\n                throw error;\n            }\n        },\n        parse: function parse(input) {\n            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '',\n                yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n            var args = lstack.slice.call(arguments, 1);\n            var lexer = Object.create(this.lexer);\n            var sharedState = {yy: {}};\n            for (var k in this.yy) {\n                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n                    sharedState.yy[k] = this.yy[k];\n                }\n            }\n            lexer.setInput(input, sharedState.yy);\n            sharedState.yy.lexer = lexer;\n            sharedState.yy.parser = this;\n            if (typeof lexer.yylloc == 'undefined') {\n                lexer.yylloc = {};\n            }\n            var yyloc = lexer.yylloc;\n            lstack.push(yyloc);\n            var ranges = lexer.options && lexer.options.ranges;\n            if (typeof sharedState.yy.parseError === 'function') {\n                this.parseError = sharedState.yy.parseError;\n            } else {\n                this.parseError = Object.getPrototypeOf(this).parseError;\n            }\n\n            function popStack(n) {\n                stack.length = stack.length - 2 * n;\n                vstack.length = vstack.length - n;\n                lstack.length = lstack.length - n;\n            }\n\n            _token_stack:\n                var lex = function () {\n                    var token;\n                    token = lexer.lex() || EOF;\n                    if (typeof token !== 'number') {\n                        token = self.symbols_[token] || token;\n                    }\n                    return token;\n                };\n            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n            while (true) {\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == 'undefined') {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === 'undefined' || !action.length || !action[0]) {\n                    var errStr = '';\n                    expected = [];\n                    for (p in table[state]) {\n                        if (this.terminals_[p] && p > TERROR) {\n                            expected.push('\\'' + this.terminals_[p] + '\\'');\n                        }\n                    }\n                    if (lexer.showPosition) {\n                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                    } else {\n                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                    }\n                    this.parseError(errStr, {\n                        text: lexer.match,\n                        token: this.terminals_[symbol] || symbol,\n                        line: lexer.yylineno,\n                        loc: yyloc,\n                        expected: expected\n                    });\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n                }\n                switch (action[0]) {\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(lexer.yytext);\n                        lstack.push(lexer.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        if (!preErrorSymbol) {\n                            yyleng = lexer.yyleng;\n                            yytext = lexer.yytext;\n                            yylineno = lexer.yylineno;\n                            yyloc = lexer.yylloc;\n                            if (recovering > 0) {\n                                recovering--;\n                            }\n                        } else {\n                            symbol = preErrorSymbol;\n                            preErrorSymbol = null;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = {\n                            first_line: lstack[lstack.length - (len || 1)].first_line,\n                            last_line: lstack[lstack.length - 1].last_line,\n                            first_column: lstack[lstack.length - (len || 1)].first_column,\n                            last_column: lstack[lstack.length - 1].last_column\n                        };\n                        if (ranges) {\n                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n                        }\n                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n                        if (typeof r !== 'undefined') {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n\n    //import {True, False, AtomicProposition, Negation, Conjunction, Disjunction, IFF, Implication} from '@/logic/formula/well-formed';\n    /* generated by jison-lex 0.3.4 */\n    var lexer = (function () {\n        var lexer = ({\n\n            EOF: 1,\n\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n\n// resets the lexer, sets new input\n            setInput: function (input, yy) {\n                this.yy = yy || this.yy || {};\n                this._input = input;\n                this._more = this._backtrack = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = '';\n                this.conditionStack = ['INITIAL'];\n                this.yylloc = {\n                    first_line: 1, first_column: 0, last_line: 1, last_column: 0\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [0, 0];\n                }\n                this.offset = 0;\n                return this;\n            },\n\n// consumes and returns one char from the input\n            input: function () {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) {\n                    this.yylloc.range[1]++;\n                }\n\n                this._input = this._input.slice(1);\n                return ch;\n            },\n\n// unshifts one char (or a string) into the input\n            unput: function (ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len);\n                //this.yyleng -= len;\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n\n                if (lines.length - 1) {\n                    this.yylineno -= lines.length - 1;\n                }\n                var r = this.yylloc.range;\n\n                this.yylloc = {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n                };\n\n                if (this.options.ranges) {\n                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n                }\n                this.yyleng = this.yytext.length;\n                return this;\n            },\n\n// When called from action, caches matched text and appends it on next action\n            more: function () {\n                this._more = true;\n                return this;\n            },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n            reject: function () {\n                if (this.options.backtrack_lexer) {\n                    this._backtrack = true;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                        text: \"\", token: null, line: this.yylineno\n                    });\n\n                }\n                return this;\n            },\n\n// retain first n characters of the match\n            less: function (n) {\n                this.unput(this.match.slice(n));\n            },\n\n// displays already matched input, i.e. for error messages\n            pastInput: function () {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n            },\n\n// displays upcoming input, i.e. for error messages\n            upcomingInput: function () {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n            },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\n            showPosition: function () {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\n            test_match: function (match, indexed_rule) {\n                var token, lines, backup;\n\n                if (this.options.backtrack_lexer) {\n                    // save context\n                    backup = {\n                        yylineno: this.yylineno,\n                        yylloc: {\n                            first_line: this.yylloc.first_line,\n                            last_line: this.last_line,\n                            first_column: this.yylloc.first_column,\n                            last_column: this.yylloc.last_column\n                        },\n                        yytext: this.yytext,\n                        match: this.match,\n                        matches: this.matches,\n                        matched: this.matched,\n                        yyleng: this.yyleng,\n                        offset: this.offset,\n                        _more: this._more,\n                        _input: this._input,\n                        yy: this.yy,\n                        conditionStack: this.conditionStack.slice(0),\n                        done: this.done\n                    };\n                    if (this.options.ranges) {\n                        backup.yylloc.range = this.yylloc.range.slice(0);\n                    }\n                }\n\n                lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno += lines.length;\n                }\n                this.yylloc = {\n                    first_line: this.yylloc.last_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.last_column,\n                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n                };\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                if (this.options.ranges) {\n                    this.yylloc.range = [this.offset, this.offset += this.yyleng];\n                }\n                this._more = false;\n                this._backtrack = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n                if (this.done && this._input) {\n                    this.done = false;\n                }\n                if (token) {\n                    return token;\n                } else if (this._backtrack) {\n                    // recover context\n                    for (var k in backup) {\n                        this[k] = backup[k];\n                    }\n                    return false; // rule action called reject() implying the next rule should be tested instead.\n                }\n                return false;\n            },\n\n// return next match in input\n            next: function () {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) {\n                    this.done = true;\n                }\n\n                var token, match, tempMatch, index;\n                if (!this._more) {\n                    this.yytext = '';\n                    this.match = '';\n                }\n                var rules = this._currentRules();\n                for (var i = 0; i < rules.length; i++) {\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (this.options.backtrack_lexer) {\n                            token = this.test_match(tempMatch, rules[i]);\n                            if (token !== false) {\n                                return token;\n                            } else if (this._backtrack) {\n                                match = false;\n                                continue; // rule action called reject() implying a rule MISmatch.\n                            } else {\n                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                                return false;\n                            }\n                        } else if (!this.options.flex) {\n                            break;\n                        }\n                    }\n                }\n                if (match) {\n                    token = this.test_match(match, rules[index]);\n                    if (token !== false) {\n                        return token;\n                    }\n                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                    return false;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                        text: \"\", token: null, line: this.yylineno\n                    });\n                }\n            },\n\n// return next match that has a token\n            lex: function lex() {\n                var r = this.next();\n                if (r) {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n\n// pop the previously active lexer condition state off the condition stack\n            popState: function popState() {\n                var n = this.conditionStack.length - 1;\n                if (n > 0) {\n                    return this.conditionStack.pop();\n                } else {\n                    return this.conditionStack[0];\n                }\n            },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n            _currentRules: function _currentRules() {\n                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n                } else {\n                    return this.conditions[\"INITIAL\"].rules;\n                }\n            },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n            topState: function topState(n) {\n                n = this.conditionStack.length - 1 - Math.abs(n || 0);\n                if (n >= 0) {\n                    return this.conditionStack[n];\n                } else {\n                    return \"INITIAL\";\n                }\n            },\n\n// alias for begin(condition)\n            pushState: function pushState(condition) {\n                this.begin(condition);\n            },\n\n// return the number of states currently on the stack\n            stateStackSize: function stateStackSize() {\n                return this.conditionStack.length;\n            },\n            options: {},\n            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n                var YYSTATE = YY_START;\n                switch ($avoiding_name_collisions) {\n                    case 0:/*skip*/\n                        break;\n                    case 1:\n                        return 5;\n                        break;\n                    case 2:\n                        return 6;\n                        break;\n                    case 3:\n                        return 'num';\n                        break;\n                    case 4:\n                        return ',';\n                        break;\n                    case 5:\n                        return 13;\n                        break;\n                    case 6:\n                        return 14;\n                        break;\n                    case 7:\n                        return yy_.yytext = '→';\n                        break;\n                    case 8:\n                        return yy_.yytext = '↔';\n                        break;\n                    case 9:\n                        return yy_.yytext = '∧';\n                        break;\n                    case 10:\n                        return yy_.yytext = '∨';\n                        break;\n                    case 11:\n                        return yy_.yytext = '﹁';\n                        break;\n                    case 12:\n                        return 4;\n                        break;\n                }\n            },\n            rules: [/^(?:\\s+)/, /^(?:[tT][rR][uU][eE])/, /^(?:[fF][aA][lL][sS][eE])/, /^(?:[0-9]+(\\.[0-9]+)?)/, /^(?:,|，)/, /^(?:\\(|（)/, /^(?:\\)|）)/, /^(?:(-|=|>)+?>|→)/, /^(?:iff|<(-|=)?>|↔)/, /^(?:([aA][nN][dD])|(&+)|∧|∧)/, /^(?:([oO][rR])|(\\|+)|∨)/, /^(?:([nN][oO][tT])|!|！|﹁|¬)/, /^(?:(\\w|[\\u4e00-\\u9fa5]|;|；)+)/],\n            conditions: {\"INITIAL\": {\"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"inclusive\": true}}\n        });\n        return lexer;\n    })();\n    parser.lexer = lexer;\n\n    function Parser() {\n        this.yy = {};\n    }\n\n    Parser.prototype = parser;\n    parser.Parser = Parser;\n    return new Parser;\n})();\nlet exports = {};\nexports.parser = compiler;\nexports.Parser = compiler.Parser;\nexports.parse = function () {\n    return compiler.parse.apply(compiler, arguments);\n};\nexport default exports;","class Assignment extends Map {\r\n    /**\r\n     *\r\n     * @param atomicPropositionOrder\r\n     */\r\n    getIntValue(atomicPropositionOrder) {\r\n        let value = 0;\r\n        let length = atomicPropositionOrder.length;\r\n        this.forEach((trueValue, atomic) => {\r\n            if (trueValue) {\r\n                value += 2 ** (length - 1 - atomicPropositionOrder.getIndexOf(atomic));\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n}\r\n\r\nexport {Assignment}\r\n\r\n/*test getIntValue\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a')\r\norder.push('b')\r\norder.push('c')\r\nlet assignment = new Assignment();\r\nassignment.set('a', true);\r\nassignment.set('c', false);\r\nassignment.set('b', true)\r\nconsole.log(assignment.getIntValue(order));\r\n//test getIntValue*/\r\n","import {Assignment} from \"@/logic/assignment\";\r\n\r\nclass AssignmentCreator {\r\n    constructor(atomicPropositionOrder) {\r\n        this.atomicPropositionOrder = atomicPropositionOrder;\r\n    }\r\n\r\n    createAssignmentFromIntValue(intValue) {\r\n        let binaryValueArray = intValue.toString(2).split('').map((v) => {\r\n            switch (v) {\r\n                case '0':\r\n                    return false;\r\n                case '1':\r\n                    return true;\r\n                //debug\r\n                default:\r\n                    throw 'getAssignmentByIntValue value error';\r\n                //debug*/\r\n            }\r\n        });\r\n        let length = this.atomicPropositionOrder.length;\r\n        while (binaryValueArray.length < length) {\r\n            binaryValueArray.unshift(false);\r\n        }\r\n        let assignment = new Assignment();\r\n        for (let i = 0; i < length; i++) {\r\n            assignment.set(this.atomicPropositionOrder.getValueOf(i), binaryValueArray[i]);\r\n        }\r\n        return assignment;\r\n    }\r\n}\r\n\r\nexport {AssignmentCreator}\r\n\r\n/*test createAssignmentFromIntValue\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet assignmentCreator = new AssignmentCreator(order);\r\nconsole.log(assignmentCreator.createAssignmentFromIntValue(5));\r\nconsole.log(assignmentCreator.createAssignmentFromIntValue(0));\r\n//test createAssignmentFromIntValue*/","import {Coverage} from \"@/logic/coverage\";\r\n\r\nclass CoveragesChooser {\r\n    constructor(coverages) {\r\n        if (coverages.length === 0 || coverages.length === undefined) {\r\n            throw 'CoveragesChooser init error';\r\n        }\r\n        this.coverages = coverages;\r\n        this.current = -1;\r\n        this.total = 1;\r\n        this.lengths = coverages.map(coverage => coverage.length);\r\n        this.lengths.forEach((length) => {\r\n            this.total *= length;\r\n        });\r\n        this.choose = [];\r\n        for (let i = 0; i < this.lengths.length; i++) {\r\n            this.choose[i] = 0;\r\n        }\r\n    }\r\n\r\n    hasNext() {\r\n        return this.current < this.total;\r\n    }\r\n\r\n    next() {\r\n        this.current++;\r\n        let choose = this.choose;\r\n        for (let i = choose.length - 1; i > 0; i--) {\r\n            if (choose[i] + 1 === this.lengths[i]) {\r\n                choose[i] = 0;\r\n            } else {\r\n                choose[i] += 1;\r\n                break;\r\n            }\r\n        }\r\n        let result = new Coverage();\r\n        this.coverages.forEach((coverage, index) => {\r\n            result.push(coverage.mintermArray[this.choose[index]]);\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nexport {CoveragesChooser}\r\n\r\n/*test next\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nconsole.log('start')\r\nlet param = [];\r\nlet coverage1 = new Coverage();\r\ncoverage1.push(new Minterm('1**'));\r\ncoverage1.push(new Minterm('01*'));\r\nlet coverage2 = new Coverage();\r\ncoverage2.push(new Minterm('01*'));\r\ncoverage2.push(new Minterm('1*0'));\r\nlet coverage3 = new Coverage();\r\ncoverage3.push(new Minterm('1**'))\r\ncoverage3.push(new Minterm('**0'))\r\ncoverage3.push(new Minterm('0*0'))\r\nparam.push(coverage1)\r\nparam.push(coverage2)\r\nparam.push(coverage3)\r\nlet chooser = new CoveragesChooser(param);\r\nwhile (chooser.hasNext()) {\r\n    console.log(1)\r\n    console.log(chooser.next().mintermValueSet);\r\n}\r\n//test next*/","import {Coverage} from \"@/logic/coverage\";\r\n\r\nclass Minterm {\r\n    constructor(v = undefined) {\r\n        if (v !== undefined) {\r\n            //debug\r\n            if (v.match(/[^10*-]/) !== null) {\r\n                throw 'invalid minterm';\r\n            }\r\n            //debug*/\r\n            this.value = v.toString();\r\n        }\r\n    }\r\n\r\n    equals(minterm) {\r\n        return this.value === minterm.value;\r\n    }\r\n\r\n    isFALSE() {\r\n        return this.value === '-'.repeat(this.value.length);\r\n    }\r\n\r\n    conjunct(minterm) {\r\n        //debug\r\n        if (this.value === undefined || minterm.value === undefined) throw 'not initialized'\r\n        if (this.value.length !== minterm.value.length) throw 'invalid conjunct';\r\n        //debug*/\r\n        if (this.isFALSE()) {\r\n            return this;\r\n        }\r\n        if (minterm.isFALSE()) {\r\n            return minterm;\r\n        }\r\n        if (this.equals(minterm)) {\r\n            return this;\r\n        }\r\n        let length = this.value.length;\r\n        let resultValue = '';\r\n        for (let i = 0; i < length; i++) {\r\n            let this_i = this.value[i];\r\n            let minterm_i = minterm.value[i];\r\n            if (this_i === minterm_i) {\r\n                resultValue += this_i;\r\n            } else {\r\n                if (this_i === '*') {\r\n                    resultValue += minterm_i;\r\n                } else if (minterm_i === '*') {\r\n                    resultValue += this_i;\r\n                } else {\r\n                    return new Minterm('-'.repeat(this.value.length));\r\n                }\r\n            }\r\n        }\r\n        let result = new Minterm();\r\n        result.value = resultValue;\r\n        return result;\r\n    }\r\n\r\n    starCount() {\r\n        let length = this.value.length;\r\n        let count = 0\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.value[i] === '*') {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    combineSub(minterm) {\r\n        if (this.isFALSE()) {\r\n            return this;\r\n        }\r\n        if (minterm.isFALSE()) {\r\n            return minterm;\r\n        }\r\n        let tag = true;\r\n        let length = this.value.length;\r\n        let resultValue = '';\r\n        for (let i = 0; i < length; i++) {\r\n            let this_i = this.value[i];\r\n            let minterm_i = minterm.value[i];\r\n            if (this_i === minterm_i) {\r\n                resultValue += this_i;\r\n            } else {\r\n                if (this_i === '*') {\r\n                    resultValue += minterm_i\r\n                } else if (minterm_i === '*') {\r\n                    resultValue += this_i;\r\n                } else if (tag) {\r\n                    resultValue += '*';\r\n                    tag = false;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        if (tag) {\r\n            return null;\r\n        }\r\n        let result = new Minterm();\r\n        result.value = resultValue;\r\n        return result;\r\n    }\r\n\r\n    cost(forConjunction = false) {\r\n        let _cost = -1;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            switch (this.value[i]) {\r\n                case '0':\r\n                    _cost += forConjunction ? 1 : 2;\r\n                    break;\r\n                case '1':\r\n                    _cost += forConjunction ? 2 : 1;\r\n                    break\r\n                default:\r\n            }\r\n        }\r\n        return _cost;\r\n    }\r\n\r\n    negate() {\r\n        let len = this.value.length;\r\n        if (this.isFALSE()) return new Minterm('*'.repeat(len));\r\n        if (this.value === '-'.repeat(len)) return new Minterm('-'.repeat(len))\r\n        let result = new Coverage();\r\n        for (let i = 0; i < len; i++) {\r\n            switch (this.value[i]) {\r\n                case '*':\r\n                    break;\r\n                case '0': {\r\n                    let valueArray = this.value.split('');\r\n                    valueArray[i] = '1';\r\n                    let newValue = valueArray.join('');\r\n                    result.push(new Minterm(newValue));\r\n                    break;\r\n                }\r\n                case '1': {\r\n                    let valueArray = this.value.split('');\r\n                    valueArray[i] = '0';\r\n                    let newValue = valueArray.join('');\r\n                    result.push(new Minterm(newValue));\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport {\r\n    Minterm\r\n}\r\n\r\n\r\n/*test conjunct\r\nlet m1 = new Minterm();\r\nm1.value = new String('1*0');\r\nlet m2 = new Minterm();\r\nm2.value = '*00';\r\nconsole.log('1*0 and *00', m1.conjunct(m2).value, m2.conjunct(m1).value);\r\nlet f = new Minterm();\r\nf.value = '---';\r\nconsole.log('---', f.conjunct(m1).value, m1.conjunct(f).value);\r\nlet m3 = new Minterm();\r\nm3.value = '*11';\r\nconsole.log('*00 and *11', m3.conjunct(m2), m2.conjunct(m3));\r\n//test conjunct*/\r\n\r\n/*test combineSub\r\nlet x, y;\r\n[x, y] = ['10*1', '11*1'];\r\nconsole.log(x, y, new Minterm(x).combineSub(new Minterm(y)).value);\r\n//test combineSub*/\r\n\r\n/*test cost\r\nlet x = new Minterm('---');\r\nconsole.log(x.cost());\r\n//test cost*/\r\n\r\n//test negate\r\n// console.log(new Minterm('10**0').negate());\r\n//test negate*/\r\n","import {CoveragesChooser} from \"@/logic/CoveragesChooser\";\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nclass Coverage {\r\n    mintermValueSet = new Set();\r\n    mintermArray = [];\r\n\r\n    get length() {\r\n        return this.mintermArray.length;\r\n    }\r\n\r\n    push(minterm) {\r\n        this.mintermValueSet.add(minterm.value);\r\n        if (this.mintermValueSet.size > this.mintermArray.length) {\r\n            this.mintermArray.push(minterm);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    disjunct(coverage) {\r\n        //debug\r\n        if (this.length === 0 || coverage.length === 0) throw 'coverage disjunct param error!';\r\n        //debug*/\r\n        let result = new Coverage();\r\n        this.mintermArray.forEach(v => result.push(v));\r\n        coverage.mintermArray.forEach(v => result.push(v));\r\n        return result;\r\n    }\r\n\r\n    conjunct(coverage) {\r\n        //debug\r\n        if (this.length === 0 || coverage.length === 0) throw 'coverage conjunct param error!';\r\n        //debug*/\r\n        let result = new Coverage();\r\n        this.mintermArray.forEach(minterm1 => {\r\n            coverage.mintermArray.forEach(minterm2 => {\r\n                result.push(minterm1.conjunct(minterm2));\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    delete(minterm) {\r\n        this.mintermValueSet.delete(minterm.value);\r\n        if (this.mintermValueSet.size < this.mintermArray.length) {\r\n            let index = this.mintermArray.findIndex((m) => {\r\n                return minterm.value === m.value;\r\n            });\r\n            this.mintermArray.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    deleteAll(coverage) {\r\n        coverage.mintermArray.forEach(v => this.delete(v));\r\n    }\r\n\r\n    fullLargestCoverage() {\r\n        if (this.length === 0) return this;\r\n        let result = new Coverage();\r\n        let startIndexes = [];\r\n        let length = this.length;\r\n        for (let i = 0; i < length; i++) {\r\n            result.push(this.mintermArray[i]);\r\n            startIndexes.push(1 + i);\r\n        }\r\n        let toDelete = new Coverage();\r\n        let i = 0;\r\n        do {\r\n            let minterm_i = result.mintermArray[i];\r\n            for (let j = startIndexes[i]; j < length; j++) {\r\n                let minterm_j = result.mintermArray[j];\r\n                let combineSub = minterm_i.combineSub(minterm_j);\r\n                if (combineSub !== null) {\r\n                    if (combineSub.conjunct(minterm_i).equals(minterm_i)) {\r\n                        toDelete.push(minterm_i);\r\n                    }\r\n                    if (combineSub.conjunct(minterm_j).equals(minterm_j)) {\r\n                        toDelete.push(minterm_j);\r\n                    }\r\n                    if (result.push(combineSub)) {\r\n                        startIndexes[i]++;\r\n                        startIndexes.push(result.length);\r\n                    }\r\n                }\r\n                startIndexes[i]++;\r\n            }\r\n            length = result.length;\r\n        } while ((i = startIndexes.findIndex(index => index < length)) !== -1);\r\n        result.deleteAll(toDelete);\r\n        return result;\r\n    }\r\n\r\n    isIntersectedWith(coverage) {\r\n        for (let i = 0; i < this.mintermArray.length; i++) {\r\n            for (let j = 0; j < coverage.mintermArray.length; j++) {\r\n                if (this.mintermArray[i].equals(coverage.mintermArray[j])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    cost(forConjuncion = false) {\r\n        let _cost = this.length - 1;\r\n        this.mintermArray.forEach((minterm) => {\r\n            _cost += minterm.cost(forConjuncion);\r\n        });\r\n        return _cost;\r\n    }\r\n\r\n    simplify(forConjunctive = false) {\r\n        let result = this.fullLargestCoverage();\r\n        let conjunctPairwise = new ConjunctPairwise(result);\r\n        result.deleteAll(conjunctPairwise.getLargestMultiOccupiedCoverage());\r\n        conjunctPairwise.deleteAllEntriesWhichValuesIntersectedWith(result);\r\n        if (conjunctPairwise.size === 0) {\r\n            return result;\r\n        } else if (result.length === 0) {\r\n            return conjunctPairwise.minimalCoverage(forConjunctive);\r\n        } else {\r\n            return result.disjunct(conjunctPairwise.minimalCoverage(forConjunctive));\r\n        }\r\n    }\r\n}\r\n\r\nclass ConjunctPairwise extends Map {\r\n    constructor(coverage) {\r\n        super();\r\n        if (!(coverage instanceof Coverage) || coverage.length === 0 || coverage.length === undefined) {\r\n            throw  'ConjunctPairwise init error'\r\n        }\r\n        this.mintermLength = coverage.mintermArray[0].value.length;\r\n        this.coverageMultiOccupied = new Coverage();\r\n        let mintermArray = coverage.mintermArray;\r\n        for (let i = 0; i < mintermArray.length; i++) {\r\n            let minterm_i = mintermArray[i];\r\n            for (let j = i + 1; j < mintermArray.length; j++) {\r\n                let minterm_j = mintermArray[j];\r\n                let mintermMultiOccupied = minterm_i.conjunct(minterm_j);\r\n                let key = mintermMultiOccupied.value;\r\n                this.coverageMultiOccupied.push(mintermMultiOccupied);\r\n                if (this.get(key) === undefined) {\r\n                    this.set(key, new Coverage());\r\n                }\r\n                let coverage = this.get(key);\r\n                coverage.push(minterm_i);\r\n                coverage.push(minterm_j);\r\n            }\r\n        }\r\n    }\r\n\r\n    getLargestMultiOccupiedCoverage() {\r\n        return this.coverageMultiOccupied.fullLargestCoverage();\r\n    }\r\n\r\n\r\n    delete(mintermMultiOccupied) {\r\n        super.delete(mintermMultiOccupied.value);\r\n        this.coverageMultiOccupied.delete(mintermMultiOccupied);\r\n    }\r\n\r\n    deleteAllEntriesWhichValuesIntersectedWith(coverage) {\r\n        let toDelete = new Set();\r\n        this.forEach((value, mintermMultiOccupied) => {\r\n            if (value.isIntersectedWith(coverage)) {\r\n                toDelete.add(mintermMultiOccupied);\r\n            }\r\n        });\r\n        toDelete.forEach(v => {\r\n            this.delete(new Minterm(v));\r\n        });\r\n        this.delete(new Minterm('-'.repeat(this.mintermLength)));\r\n    }\r\n\r\n    minimalCoverage(forConjunction = false) {\r\n        let param = [];\r\n        this.forEach(coverage => {\r\n            param.push(coverage);\r\n        });\r\n        let _cost = Number.MAX_SAFE_INTEGER;\r\n        let result = undefined;\r\n        let chooser = new CoveragesChooser(param);\r\n        if (chooser.total < 2 ** 12) {\r\n            while (chooser.hasNext()) {\r\n                let candidateCoverage = chooser.next();\r\n                let cost = candidateCoverage.cost(forConjunction);\r\n                if (cost < _cost) {\r\n                    _cost = cost;\r\n                    result = candidateCoverage;\r\n                }\r\n            }\r\n        } else {\r\n            throw '算力不足！'\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    Coverage\r\n}\r\n\r\n/*test push delete disjunct deleteAll\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nlet coverage1 = new Coverage();\r\ncoverage1.push(new Minterm('111'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\ncoverage1.push(new Minterm('111'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\ncoverage1.push(new Minterm('11*'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\ncoverage1.delete(new Minterm('111'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\n\r\nlet coverage2 = new Coverage();\r\ncoverage1.push(new Minterm('000'));\r\ncoverage2.push(new Minterm('001'));\r\ncoverage2.push(new Minterm('101'));\r\nlet dis = coverage1.disjunct(coverage2);\r\nconsole.log(dis.mintermArray.map(v => v.value));\r\ndis.deleteAll(coverage1);\r\nconsole.log(dis.mintermArray.map(v => v.value));\r\n\r\n//test push delete disjunct deleteAll*/\r\n\r\n/*test conjunct conjunctPairwise\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nlet coverage1 = new Coverage();\r\ncoverage1.push(new Minterm('1**'))\r\ncoverage1.push(new Minterm('*1*'))\r\nlet coverage2 = new Coverage();\r\ncoverage2.push(new Minterm('*0*'))\r\ncoverage2.push(new Minterm('*10'))\r\nconsole.log(coverage1.conjunct(coverage2).mintermArray.map(v => v.value));\r\nlet coverage = coverage1.disjunct(coverage2);\r\nconsole.log(coverage.mintermArray.map(v => v.value));\r\nconsole.log(coverage.conjunctPairwise().mintermArray.map(v => v.value));\r\n//test conjunct conjunctPairwise*/\r\n\r\n/*test fullLargestCoverage simplify\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nlet coverage = new Coverage();\r\ncoverage.push(new Minterm('---'))\r\nconsole.log(coverage.fullLargestCoverage().mintermArray.map(v => v.value));\r\nconsole.log(coverage.simplify().mintermArray.map(v => v.value));\r\n//test fullLargestCoverage simplify*/","import {Coverage} from \"@/logic/coverage\";\r\nimport {AtomicProposition, Conjunction, Disjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass CoverageCreator {\r\n    constructor(mintermCreator = undefined) {\r\n        if (mintermCreator !== undefined) {\r\n            this.mintermCreator = mintermCreator;\r\n        }\r\n    }\r\n\r\n    createFromAssignments(assignments) {\r\n        let result = new Coverage();\r\n        assignments.forEach(assignment => {\r\n            result.push(this.mintermCreator.createFromAssignment(assignment));\r\n        });\r\n        return result;\r\n    }\r\n\r\n    createFromSimpleDisjunction(disjunction) {\r\n        let result = new Coverage();\r\n        switch (disjunction.constructor) {\r\n            case True:\r\n            case False:\r\n            case AtomicProposition:\r\n            case Negation:\r\n            case Conjunction:\r\n                result.push(this.mintermCreator.createFromSimpleConjunction(disjunction));\r\n                return result;\r\n            case Disjunction:\r\n                disjunction.disjuncts.forEach((disjunct => {\r\n                    result.push(this.mintermCreator.createFromSimpleConjunction(disjunct));\r\n                }))\r\n                return result;\r\n            default:\r\n                throw 'coverage create type error'\r\n        }\r\n    }\r\n}\r\n\r\nexport {CoverageCreator}\r\n\r\n/*test createFromAssignmentsF\r\nimport {Assignment} from \"@/logic/assignment\";\r\nimport {MintermCreator} from \"@/logic/minterm-creator\";\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('b');\r\norder.push('a');\r\norder.push('c');\r\nlet coverageCreator = new CoverageCreator(new MintermCreator(order));\r\nlet assignments = new Set();\r\nlet assignment1 = new Assignment();\r\nassignment1.set('a', false);\r\nassignment1.set('b', false);\r\nassignment1.set('c', false);\r\nassignments.add(assignment1);\r\n\r\nlet assignment2 = new Assignment();\r\nassignment2.set('a', false);\r\nassignment2.set('b', true);\r\nassignment2.set('c', false);\r\nassignments.add(assignment2);\r\nconsole.log(coverageCreator.createFromAssignments(assignments).mintermArray.map(v => v.value));\r\n//test createFromAssignments*/\r\n\r\n/*test createFromSimpleDisjunction\r\nimport compiler from \"@/logic/compiler\";\r\nimport {MintermCreator} from \"@/logic/minterm-creator\";\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet coverageCreator = new CoverageCreator(new MintermCreator(order));\r\nconsole.log(coverageCreator.createFromSimpleDisjunction(compiler.parse('a and b or true or false or a and c ')));\r\nconsole.log(coverageCreator.createFromSimpleDisjunction(compiler.parse('a and b')));\r\n\r\n//test createFromSimpleDisjunction*/\r\n","import {Minterm} from \"@/logic/minterm\";\r\nimport {AtomicProposition, Conjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass MintermCreator {\r\n    constructor(atomicPropositionOrder) {\r\n        this.atomicPropositionOrder = atomicPropositionOrder;\r\n    }\r\n\r\n    createFromAssignment(assignment) {\r\n        let length = this.atomicPropositionOrder.length;\r\n        let resultValue = '';\r\n        for (let i = 0; i < length; i++) {\r\n            let trueValue = assignment.get(this.atomicPropositionOrder.getValueOf(i));\r\n            //debug\r\n            if (trueValue === undefined) {\r\n                throw 'create minterm form assignment error';\r\n            }\r\n            //debug*/\r\n            resultValue += trueValue ? '1' : '0';\r\n        }\r\n        return new Minterm(resultValue);\r\n    }\r\n\r\n    createFromSimpleConjunction(conjunction) {\r\n        switch (conjunction.constructor) {\r\n            case True:\r\n                return new Minterm('*'.repeat(this.atomicPropositionOrder.length));\r\n            case False:\r\n                return new Minterm('-'.repeat(this.atomicPropositionOrder.length));\r\n            case AtomicProposition: {\r\n                let indexOfTrue = this.atomicPropositionOrder.getIndexOf(conjunction.name);\r\n                let mintermString = '';\r\n                for (let i = 0; i < this.atomicPropositionOrder.length; i++) {\r\n                    mintermString += i === indexOfTrue ? '1' : '*';\r\n                }\r\n                return new Minterm(mintermString);\r\n            }\r\n            case Negation: {\r\n                //debug\r\n                if (!(conjunction.item instanceof AtomicProposition)) {\r\n                    throw 'minterm create type error';\r\n                }\r\n                //debug*/\r\n                let indexOfTrue = this.atomicPropositionOrder.getIndexOf(conjunction.item.name);\r\n                let mintermString = '';\r\n                for (let i = 0; i < this.atomicPropositionOrder.length; i++) {\r\n                    mintermString += i === indexOfTrue ? '0' : '*';\r\n                }\r\n                return new Minterm(mintermString);\r\n            }\r\n            case Conjunction:\r\n                let mintermStringArray = '*'.repeat(this.atomicPropositionOrder.length).split('');\r\n                conjunction.conjuncts.forEach(conjunct => {\r\n                    if (conjunct instanceof AtomicProposition) {\r\n                        mintermStringArray[this.atomicPropositionOrder.getIndexOf(conjunct.name)] = '1';\r\n                    } else if ((conjunct instanceof Negation) && (conjunct.item instanceof AtomicProposition)) {\r\n                        mintermStringArray[this.atomicPropositionOrder.getIndexOf(conjunct.item.name)] = '0';\r\n                    }\r\n                    //debug\r\n                    else {\r\n                        throw 'minterm create error';\r\n                    }\r\n                    //debug*/\r\n                });\r\n                return new Minterm(mintermStringArray.join(''));\r\n        }\r\n    }\r\n}\r\n\r\nexport {MintermCreator}\r\n\r\n/*test createFromAssignment\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('b');\r\norder.push('a');\r\norder.push('c');\r\nlet assignment = new Assignment();\r\nassignment.set('a', true);\r\nassignment.set('b', false);\r\nassignment.set('c', true);\r\nconsole.log(new MintermCreator(order).createFromAssignment(assignment).value);\r\n//test createFromAssignment*/","import {Disjunction} from \"@/logic/well-formed\";\r\n\r\nclass CoverageWellFormedConvertor {\r\n    constructor(mintermWellFormedConvertor) {\r\n        this.mintermWellFormedConvertor = mintermWellFormedConvertor;\r\n    }\r\n\r\n    convertCoverageToDisjunction(coverage) {\r\n        if (coverage.length === 0) throw 'convertCoverageToDisjunction error';\r\n        if (coverage.length === 1) return this.mintermWellFormedConvertor.convertMintermToConjunction(coverage.mintermArray[0]);\r\n        let disjunctive = [];\r\n        coverage.mintermArray.forEach((minterm) => {\r\n            disjunctive.push(this.mintermWellFormedConvertor.convertMintermToConjunction(minterm));\r\n        });\r\n        return new Disjunction(...disjunctive);\r\n    }\r\n}\r\n\r\nexport {CoverageWellFormedConvertor}\r\n\r\n/*test convertCoverageToDisjunction\r\nimport {Coverage} from \"@/logic/coverage\";\r\nimport {Minterm} from \"@/logic/minterm\";\r\nimport {StringOrder} from \"@/logic/string-order\";\r\nimport {MintermWellFormedConvertor} from \"@/logic/minterm-well-formed-convertor\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet convertor = new CoverageWellFormedConvertor(new MintermWellFormedConvertor(order));\r\nlet coverage = new Coverage();\r\nconsole.log(convertor.convertCoverageToDisjunction(coverage).toString());\r\ncoverage.push(new Minterm('010'));\r\nconsole.log(convertor.convertCoverageToDisjunction(coverage).toString());\r\ncoverage.push(new Minterm('1*0'));\r\ncoverage.push(new Minterm('***'));\r\ncoverage.push(new Minterm('---'));\r\nconsole.log(convertor.convertCoverageToDisjunction(coverage).toString());\r\n//test convertCoverageToDisjunction*/","import {AtomicProposition, Conjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass MintermWellFormedConvertor {\r\n    constructor(atomicPropositionOrder) {\r\n        if (atomicPropositionOrder.length === 0) throw 'Minterm convert to wellformed error!'\r\n        this.atomicPropositionOrder = atomicPropositionOrder;\r\n    }\r\n\r\n    convertMintermToConjunction(minterm) {\r\n        let value = minterm.value;\r\n        if (value === '-'.repeat(value.length)) return new False();\r\n        if (value === '*'.repeat(value.length)) return new True();\r\n        let conjuncts = [];\r\n        for (let i = 0; i < value.length; i++) {\r\n            switch (value[i]) {\r\n                case '0':\r\n                    conjuncts.push(new Negation(new AtomicProposition(this.atomicPropositionOrder.getValueOf(i))));\r\n                    break;\r\n                case '1':\r\n                    conjuncts.push(new AtomicProposition(this.atomicPropositionOrder.getValueOf(i)));\r\n                    break;\r\n                case '*':\r\n                    break;\r\n                default:\r\n                    throw 'unknow char'\r\n            }\r\n        }\r\n        if (conjuncts.length === 1) {\r\n            return conjuncts[0];\r\n        }\r\n        return new Conjunction(...conjuncts);\r\n    }\r\n}\r\n\r\nexport {MintermWellFormedConvertor}\r\n\r\n/*test convertMintermToConjunction\r\nimport {StringOrder} from \"@/logic/string-order\";\r\nimport {Minterm} from \"@/logic/minterm\";\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet test = new Minterm('---');\r\nlet testCovertor = new MintermWellFormedConvertor(order);\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\ntest = new Minterm('***');\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\ntest = new Minterm('1*0');\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\ntest = new Minterm('110');\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\n//test convertMintermToConjunction*/","import {CoverageCreator} from \"@/logic/coverage-creator\";\r\nimport {MintermCreator} from \"@/logic/minterm-creator\";\r\nimport {Conjunction, Disjunction, False, IFF, Implication, Negation, True} from \"@/logic/well-formed\";\r\nimport {CoverageWellFormedConvertor} from \"@/logic/coverage-well-formed-convertor\";\r\nimport {MintermWellFormedConvertor} from \"@/logic/minterm-well-formed-convertor\";\r\nimport {TrueTable} from \"@/logic/true-table\";\r\n\r\nclass WellFormedSimplifier {\r\n    constructor(wellFormed) {\r\n        this.wellFormed = wellFormed;\r\n        let atomicPropositionOrder = wellFormed.atomicPropositionOrder;\r\n        this.atomicPropositionCount = atomicPropositionOrder.length;\r\n        if (atomicPropositionOrder.length === 0) return this;\r\n        this.coverageCreator = new CoverageCreator(new MintermCreator(atomicPropositionOrder));\r\n        this.coverageWellFormedConvertor = new CoverageWellFormedConvertor(new MintermWellFormedConvertor(atomicPropositionOrder));\r\n    }\r\n\r\n    get trueTable() {\r\n        if (this._trueTable === undefined) {\r\n            this._trueTable = new TrueTable(this.wellFormed);\r\n        }\r\n        return this._trueTable;\r\n    }\r\n\r\n    simplifyDisjunctiveTrueTableMethod() {\r\n        if (this.wellFormed instanceof True) {\r\n            throw 'getSimplifiedCoverageTrueTableMethod meet true error!'\r\n        }\r\n        if (this.wellFormed instanceof False) {\r\n            throw 'getSimplifiedCoverageTrueTableMethod meet false error!'\r\n        }\r\n        let assignmentsMakeWellFormedTrue = this.trueTable.getAssignmentsMakeWellFormedTrue();\r\n        if (assignmentsMakeWellFormedTrue.size === 0) {\r\n            return new False();\r\n        }\r\n        let coverage = this.coverageCreator.createFromAssignments(assignmentsMakeWellFormedTrue);\r\n        coverage = coverage.simplify();\r\n        return this.coverageWellFormedConvertor.convertCoverageToDisjunction(coverage);\r\n\r\n    }\r\n\r\n    simplifyDisjunctive() {\r\n        if (this.atomicPropositionCount === 0) return this.wellFormed.boolFunction() ? new True() : new False();\r\n        if (this.atomicPropositionCount < 8) {\r\n            return this.simplifyDisjunctiveTrueTableMethod();\r\n        } else {\r\n            switch (this.wellFormed.constructor) {\r\n                case Negation:\r\n                    return new WellFormedSimplifier(this.wellFormed.inward()).simplifyDisjunctive();\r\n                case Implication:\r\n                    return new WellFormedSimplifier(this.wellFormed.toDisjunction()).simplifyDisjunctive();\r\n                case IFF:\r\n                    return new WellFormedSimplifier(this.wellFormed.toConjunction()).simplifyDisjunctive();\r\n                case Conjunction: {\r\n                    let conjuncts = this.wellFormed.conjuncts;\r\n                    let length = conjuncts.length;\r\n                    let simplify1 = undefined;\r\n                    let simplify2 = undefined;\r\n                    let splitIndex = Math.floor(length / 2);\r\n                    if (length <= 3) {\r\n                        let split1 = conjuncts[0];\r\n                        simplify1 = new WellFormedSimplifier(split1).simplifyDisjunctive();\r\n                    } else {\r\n                        let split1 = new Conjunction(...conjuncts.slice(0, splitIndex));\r\n                        simplify1 = new WellFormedSimplifier(split1).simplifyDisjunctive();\r\n                    }\r\n                    if (length === 2) {\r\n                        let split2 = conjuncts[1];\r\n                        simplify2 = new WellFormedSimplifier(split2).simplifyDisjunctive();\r\n                    } else {\r\n                        let split2 = new Conjunction(...conjuncts.slice(splitIndex, length));\r\n                        simplify2 = new WellFormedSimplifier(split2).simplifyDisjunctive();\r\n                    }\r\n                    let coverageConjunted = this.coverageCreator.createFromSimpleDisjunction(simplify1).conjunct(this.coverageCreator.createFromSimpleDisjunction(simplify2));\r\n                    return this.coverageWellFormedConvertor.convertCoverageToDisjunction(coverageConjunted.simplify());\r\n                }\r\n                case Disjunction: {\r\n                    let disjuncts = this.wellFormed.disjuncts;\r\n                    let length = disjuncts.length;\r\n                    let simplify1 = undefined;\r\n                    let simplify2 = undefined;\r\n                    let splitIndex = Math.floor(length / 2);\r\n                    if (length <= 3) {\r\n                        simplify1 = new WellFormedSimplifier(disjuncts[0]).simplifyDisjunctive();\r\n                    } else {\r\n                        simplify1 = new WellFormedSimplifier(new Disjunction(...disjuncts.slice(0, splitIndex))).simplifyDisjunctive();\r\n                    }\r\n                    if (length === 2) {\r\n                        simplify2 = new WellFormedSimplifier(disjuncts[1]).simplifyDisjunctive();\r\n                    } else {\r\n                        simplify2 = new WellFormedSimplifier(new Disjunction(...disjuncts.slice(splitIndex, length))).simplifyDisjunctive();\r\n                    }\r\n                    let coverage1 = this.coverageCreator.createFromSimpleDisjunction(simplify1);\r\n                    let coverage2 = this.coverageCreator.createFromSimpleDisjunction(simplify2);\r\n                    let coverageDisjuncted = coverage1.disjunct(coverage2);\r\n                    return this.coverageWellFormedConvertor.convertCoverageToDisjunction(coverageDisjuncted.simplify());\r\n                }\r\n                default:\r\n                    throw 'type error';\r\n            }\r\n        }\r\n    }\r\n\r\n    simplifyConjunctive() {\r\n        let inversed = this.wellFormed.inverse();\r\n        let simplifiedInversed = new WellFormedSimplifier(inversed).simplifyDisjunctive();\r\n        return simplifiedInversed.inverse();\r\n    }\r\n}\r\n\r\nexport {WellFormedSimplifier}\r\n\r\n/*test simplifyDisjunctive simplifyConjunctive\r\nimport compiler from \"@/logic/compiler\";\r\n\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse('not b and c or a and b'));\r\n// console.log(wellFormedSimplifier.simplifyDisjunctive().toString());\r\n// console.log(wellFormedSimplifier.simplifyConjunctive().toString());\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse(\"a and (a <-> b) and (b<->c) and (c<->d) and (d<->e) and (e<->f) and (f<->g) and (h<->i) and (i<->j) and (j<->k) and (k<->l) and (l<->m) -> m\"));\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse(\" not a and not b or a and b or c -> d  \"));\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse('not(a ->b)'));\r\nconsole.log(wellFormedSimplifier.simplifyDisjunctive().toString());\r\nconsole.log(wellFormedSimplifier.simplifyConjunctive().toString());\r\n;\r\n//test simplifyDisjunctive simplifyConjunctive*/","import {AssignmentCreator} from \"@/logic/assignment-creator\";\r\nimport {WellFormedSimplifier} from \"@/logic/well-formed-simplifier\";\r\nimport {AtomicProposition, Conjunction, Disjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass TrueTableShowable {\r\n    wellFormed;\r\n    head;\r\n    body;\r\n}\r\n\r\nclass TrueTable extends TrueTableShowable {\r\n    constructor(wellFormed) {\r\n        super();\r\n        this.wellFormed = wellFormed;\r\n        let atomicPropositionOrder = wellFormed.atomicPropositionOrder;\r\n        this.head = [];\r\n        this.head.push(...atomicPropositionOrder.stringArray);\r\n        this.head.push(wellFormed.toString());\r\n        this.trueValues = [];\r\n        this.body = [];\r\n        this.assignmentCreator = new AssignmentCreator(atomicPropositionOrder);\r\n        let atomicPropositionCount = atomicPropositionOrder.length;\r\n        if (atomicPropositionCount === 0) {\r\n            this.body.push(this.wellFormed.boolFunction() ? '1' : '0');\r\n            return this;\r\n        }\r\n        let rowCount = 2 ** atomicPropositionCount;\r\n        for (let i = 0; i < rowCount; i++) {\r\n            let assignment = this.assignmentCreator.createAssignmentFromIntValue(i);\r\n            let trueValue = wellFormed.boolFunction(assignment);\r\n            this.trueValues[i] = trueValue;\r\n            let row = i.toString(2).split('');\r\n            while (row.length < atomicPropositionCount) {\r\n                row.unshift('0');\r\n            }\r\n            row.push(trueValue ? '1' : '0');\r\n            this.body.push(row);\r\n        }\r\n\r\n    }\r\n\r\n    getAssignmentsMakeWellFormedTrue() {\r\n        let result = new Set();\r\n        this.trueValues.forEach((value, index) => {\r\n            if (value) {\r\n                result.add(this.assignmentCreator.createAssignmentFromIntValue(index));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nclass SimplifiedTrueTable extends TrueTableShowable {\r\n    constructor(wellFormed) {\r\n        super();\r\n        this.wellFormed = wellFormed;\r\n        let order = this.wellFormed.atomicPropositionOrder;\r\n        this.head = order.stringArray.map(v => v);\r\n        this.head.push(this.wellFormed.toString());\r\n        this.wellFormedSimplifier = new WellFormedSimplifier(wellFormed);\r\n        this.body = [];\r\n        let count = this.wellFormed.atomicPropositionOrder.length;\r\n        try {\r\n            let simplifiedDisjunction = this.wellFormedSimplifier.simplifyDisjunctive();\r\n            if (simplifiedDisjunction instanceof True) {\r\n                this.body.push(['1']);\r\n                return this;\r\n            }\r\n            if (simplifiedDisjunction instanceof False) {\r\n                this.body.push(['0']);\r\n                return this;\r\n            }\r\n            if (!(simplifiedDisjunction instanceof Disjunction)) {\r\n                simplifiedDisjunction.disjuncts = [simplifiedDisjunction];\r\n            }\r\n            simplifiedDisjunction.disjuncts.forEach(disjunct => {\r\n                let row = '*'.repeat(count).split('');\r\n                switch (disjunct.constructor) {\r\n                    case AtomicProposition:\r\n                        row[order.getIndexOf(disjunct.name)] = '1';\r\n                        break;\r\n                    case Negation:\r\n                        row[order.getIndexOf(disjunct.item.name)] = '0';\r\n                        break;\r\n                    case Conjunction:\r\n                        disjunct.conjuncts.forEach(conjunct => {\r\n                            switch (conjunct.constructor) {\r\n                                case AtomicProposition:\r\n                                    row[order.getIndexOf(conjunct.name)] = '1';\r\n                                    break;\r\n                                case Negation:\r\n                                    row[order.getIndexOf(conjunct.item.name)] = '0';\r\n                                    break;\r\n                                default:\r\n                                    throw 'simplified true table error';\r\n                            }\r\n                        });\r\n                        break;\r\n                    default:\r\n                        throw 'simplified true table error';\r\n                }\r\n                row.push('1')\r\n                this.body.push(row);\r\n            });\r\n        } catch (e) {\r\n        }\r\n\r\n        try {\r\n            let simplifiedConjunction = this.wellFormedSimplifier.simplifyConjunctive();\r\n            if (simplifiedConjunction instanceof True) {\r\n                this.body.push(['1']);\r\n                return this;\r\n            }\r\n            if (simplifiedConjunction instanceof False) {\r\n                this.body.push(['0']);\r\n                return this;\r\n            }\r\n            if (!(simplifiedConjunction instanceof Conjunction)) {\r\n                simplifiedConjunction.constructs = [simplifiedConjunction];\r\n            }\r\n            simplifiedConjunction.conjuncts.forEach((conjunct) => {\r\n                let row = '*'.repeat(count).split('');\r\n                switch (conjunct.constructor) {\r\n                    case AtomicProposition:\r\n                        row[order.getIndexOf(conjunct.name)] = '0';\r\n                        break;\r\n                    case Negation:\r\n                        row[order.getIndexOf(conjunct.item.name)] = '1';\r\n                        break;\r\n                    case Disjunction:\r\n                        conjunct.disjuncts.forEach(disjunct => {\r\n                            switch (disjunct.constructor) {\r\n                                case AtomicProposition:\r\n                                    row[order.getIndexOf(disjunct.name)] = '0';\r\n                                    break;\r\n                                case Negation:\r\n                                    row[order.getIndexOf(disjunct.item.name)] = '1';\r\n                                    break;\r\n                                default :\r\n                                    throw 'simplified true table error';\r\n                            }\r\n                        });\r\n                        break;\r\n                    default:\r\n                        throw 'simplified true table error'\r\n                }\r\n                row.push('0');\r\n                this.body.push(row);\r\n            });\r\n        } catch (e) {\r\n        }\r\n    }\r\n}\r\n\r\nexport {TrueTable, TrueTableShowable, SimplifiedTrueTable}\r\n\r\n/*test all\r\nimport compiler from \"@/logic/compiler\";\r\n\r\nlet trueTable = new TrueTable(compiler.parse('a and b'));\r\nconsole.log(trueTable);\r\nconsole.log(trueTable.getAssignmentsMakeWellFormedTrue());\r\ntrueTable = new TrueTable(compiler.parse('true'));\r\nconsole.log(trueTable);\r\nconsole.log(trueTable.getAssignmentsMakeWellFormedTrue());\r\ntrueTable = new TrueTable(compiler.parse('false'));\r\nconsole.log(trueTable);\r\nconsole.log(trueTable.getAssignmentsMakeWellFormedTrue());\r\n//test all*/\r\n\r\n//test SimplifiedTrueTable\r\nimport compiler from \"@/logic/compiler\";\r\n\r\nconsole.log(new SimplifiedTrueTable(compiler.parse('a and b')));\r\n//test SimplifiedTrueTable*/","import compiler from \"@/logic/compiler\";\r\nimport {SimplifiedTrueTable, TrueTable} from \"@/logic/true-table\";\r\nimport {WellFormedSimplifier} from \"@/logic/well-formed-simplifier\";\r\n\r\nclass WellFormedUtil {\r\n    constructor(str) {\r\n        this.wellFormed = compiler.parse(str);\r\n        this.simplifier = new WellFormedSimplifier(this.wellFormed);\r\n        this.simplifiedTrueTable = new SimplifiedTrueTable(this.wellFormed);\r\n    }\r\n\r\n    get trueTable() {\r\n        if (this._trueTable === undefined) {\r\n            this._trueTable = new TrueTable(this.wellFormed);\r\n        }\r\n        return this._trueTable;\r\n    }\r\n\r\n    formulaString() {\r\n        return this.wellFormed.toString();\r\n    }\r\n\r\n    simplifiedDisjunctionString() {\r\n        try {\r\n            return this.simplifier.simplifyDisjunctive().toString();\r\n        } catch (e) {\r\n            return '算力不足无法计算！';\r\n        }\r\n\r\n    }\r\n\r\n    simplifiedConjunctionString() {\r\n        try {\r\n            return this.simplifier.simplifyConjunctive().toString();\r\n        } catch (e) {\r\n            return '算力不足无法计算！';\r\n        }\r\n    }\r\n\r\n    trueTableShowAble() {\r\n        return this.wellFormed.atomicPropositionOrder.length < 6;\r\n    }\r\n}\r\n\r\nexport {\r\n    WellFormedUtil\r\n}","<template>\r\n  <div>\r\n    <div>\r\n      <input id=\"formula_input\" type=\"text\" v-model.lazy=\"input\">\r\n      <button id=\"formula_submit\" @click=\"submitFormula\">确定</button>\r\n    </div>\r\n    <div id=\"formula_show\">\r\n      <div>识别到公式：{{ wellFormedUtil.formulaString() }}</div>\r\n      <div>最简合取式：{{ wellFormedUtil.simplifiedConjunctionString() }}</div>\r\n      <div>最简析取式：{{ wellFormedUtil.simplifiedDisjunctionString() }}</div>\r\n    </div>\r\n    <div>\r\n      <div v-if=\"wellFormedUtil.trueTableShowAble()\">\r\n        <div>原始真值表</div>\r\n        <table class=\"true_table\">\r\n          <th v-for=\"th in wellFormedUtil.trueTable.head\">{{ th }}</th>\r\n          <tr v-for=\"tr in wellFormedUtil.trueTable.body\">\r\n            <td v-for=\"td in tr\">{{ td }}</td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n      <div v-else>\r\n        原始真值表过长，请参考以下简化的真值表：\r\n      </div>\r\n      <div>\r\n        <div>简化的真值表</div>\r\n        <table class=\"true_table\">\r\n          <th v-for=\"th in wellFormedUtil.simplifiedTrueTable.head\">\r\n            {{ th }}\r\n          </th>\r\n          <tr v-for=\"tr in wellFormedUtil.simplifiedTrueTable.body\">\r\n            <td v-for=\"td in tr\">\r\n              {{ td }}\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport {WellFormedUtil} from \"@/logic/well-formed-util\";\r\n\r\nexport default {\r\n  name: \"LogicTool\",\r\n  data() {\r\n    return {\r\n      input: \"a and b\",\r\n      wellFormedUtil: new WellFormedUtil('a and b')\r\n    }\r\n  },\r\n  methods: {\r\n    submitFormula() {\r\n      this.wellFormedUtil = null;\r\n      this.wellFormedUtil = new WellFormedUtil(this.input);\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n#formula_input {\r\n  width: 30%;\r\n  margin: 6px;\r\n}\r\n\r\n#formula_submit {\r\n  width: 5%;\r\n  margin: 6px;\r\n}\r\n\r\n#formula_show {\r\n  margin: 10px;\r\n  font-size: 20px;\r\n}\r\n\r\n.true_table {\r\n  margin: 0 auto;\r\n}\r\n\r\n.true_table,\r\n.true_table th,\r\n.true_table td {\r\n  text-align: center;\r\n  border-bottom: 1px solid rgb(161, 159, 159);\r\n}\r\n\r\n.true_table th,\r\n.true_table td {\r\n  padding: 0 10px;\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./LogicTool.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./LogicTool.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./LogicTool.vue?vue&type=template&id=b1f771ca&\"\nimport script from \"./LogicTool.vue?vue&type=script&lang=js&\"\nexport * from \"./LogicTool.vue?vue&type=script&lang=js&\"\nimport style0 from \"./LogicTool.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport LogicTool from \"@/views/LogicTool\";\n\nVue.use(VueRouter)\n\nconst routes = [\n    {\n        path: '/',\n        name: 'logicTool',\n        component: LogicTool,\n    },\n    {\n        path: '/about',\n        name: 'about',\n        // route level code-splitting\n        // this generates a separate chunk (about.[hash].js) for this route\n        // which is lazy-loaded when the route is visited.\n        component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n    }\n]\n\nconst router = new VueRouter({\n    routes\n})\n\nexport default router\n","import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n  },\n  getters: {\n  },\n  mutations: {\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store'\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  router,\r\n  store,\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + \"about\" + \"-legacy.\" + \"f20268a9\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"logic-workstation:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunklogic_workstation\"] = self[\"webpackChunklogic_workstation\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(1926); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","_v","staticRenderFns","component","directives","name","rawName","value","expression","modifiers","domProps","on","$event","input","target","submitFormula","_s","wellFormedUtil","formulaString","simplifiedConjunctionString","simplifiedDisjunctionString","trueTableShowAble","staticClass","_l","trueTable","th","tr","td","simplifiedTrueTable","StringOrder","Map","stringArray","length","stringIndexMap","has","push","set","stringOrder","forEach","string","get","index","WellFormed","atomicPropositionOrder","undefined","date","getDefaultAtomicPropositionOrder","Negation","inward","assignment","wellFormed","True","instance","False","AtomicProposition","order","item","constructor","Conjunction","Disjunction","conjuncts","map","conjunct","inverse","disjuncts","disjunct","Implication","antecedent","consequent","IFF","condition1","condition2","boolFunction","toString","toStringInside","pushAll","some","join","compiler","o","k","v","l","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","parser","trace","yy","symbols_","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","enclosed","table","defaultActions","parseError","str","hash","recoverable","error","Error","parse","self","stack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","symbol","preErrorSymbol","state","action","r","p","len","newState","expected","lex","token","yyval","errStr","showPosition","text","match","line","loc","Array","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","exports","Assignment","trueValue","atomic","getIndexOf","AssignmentCreator","intValue","binaryValueArray","unshift","getValueOf","CoveragesChooser","coverages","current","total","lengths","coverage","choose","result","Coverage","mintermArray","Minterm","minterm","repeat","isFALSE","equals","resultValue","this_i","minterm_i","count","tag","forConjunction","_cost","valueArray","newValue","Set","mintermValueSet","add","size","minterm1","minterm2","delete","findIndex","m","splice","startIndexes","toDelete","j","minterm_j","combineSub","deleteAll","forConjuncion","cost","forConjunctive","fullLargestCoverage","conjunctPairwise","ConjunctPairwise","getLargestMultiOccupiedCoverage","deleteAllEntriesWhichValuesIntersectedWith","minimalCoverage","mintermLength","coverageMultiOccupied","mintermMultiOccupied","key","isIntersectedWith","param","Number","MAX_SAFE_INTEGER","chooser","hasNext","candidateCoverage","CoverageCreator","mintermCreator","assignments","createFromAssignment","disjunction","createFromSimpleConjunction","MintermCreator","conjunction","indexOfTrue","mintermString","mintermStringArray","CoverageWellFormedConvertor","mintermWellFormedConvertor","convertMintermToConjunction","disjunctive","MintermWellFormedConvertor","WellFormedSimplifier","atomicPropositionCount","coverageCreator","coverageWellFormedConvertor","_trueTable","TrueTable","assignmentsMakeWellFormedTrue","getAssignmentsMakeWellFormedTrue","createFromAssignments","simplify","convertCoverageToDisjunction","simplifyDisjunctiveTrueTableMethod","simplifyDisjunctive","toDisjunction","toConjunction","simplify1","simplify2","splitIndex","floor","split1","split2","coverageConjunted","createFromSimpleDisjunction","coverage1","coverage2","coverageDisjuncted","inversed","simplifiedInversed","TrueTableShowable","head","trueValues","body","assignmentCreator","rowCount","createAssignmentFromIntValue","row","SimplifiedTrueTable","wellFormedSimplifier","simplifiedDisjunction","e","simplifiedConjunction","simplifyConjunctive","constructs","console","log","WellFormedUtil","simplifier","data","methods","Vue","VueRouter","routes","path","LogicTool","router","Vuex","getters","mutations","actions","modules","store","h","App","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","keys","every","getter","__esModule","d","a","definition","defineProperty","enumerable","f","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","Function","window","obj","prop","inProgress","dataWebpackPrefix","url","script","needAttach","scripts","document","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","type","appendChild","Symbol","toStringTag","installedChunks","installedChunkData","promise","resolve","loadingEnded","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}