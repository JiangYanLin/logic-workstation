{"version":3,"file":"js/app.c123a274.js","mappings":"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","sources":["webpack://logic-workstation/./src/App.vue?2a31","webpack://logic-workstation/./src/App.vue?facb","webpack://logic-workstation/./src/App.vue","webpack://logic-workstation/./src/views/LogicTool.vue?1b3d","webpack://logic-workstation/./src/logic/string-order.js","webpack://logic-workstation/./src/logic/well-formed.js","webpack://logic-workstation/./src/logic/compiler.js","webpack://logic-workstation/./src/logic/assignment.js","webpack://logic-workstation/./src/logic/assignment-creator.js","webpack://logic-workstation/./src/logic/CoveragesChooser.js","webpack://logic-workstation/./src/logic/minterm.js","webpack://logic-workstation/./src/logic/coverage.js","webpack://logic-workstation/./src/logic/coverage-creator.js","webpack://logic-workstation/./src/logic/minterm-creator.js","webpack://logic-workstation/./src/logic/coverage-well-formed-convertor.js","webpack://logic-workstation/./src/logic/minterm-well-formed-convertor.js","webpack://logic-workstation/./src/logic/well-formed-simplifier.js","webpack://logic-workstation/./src/logic/true-table.js","webpack://logic-workstation/./src/logic/well-formed-util.js","webpack://logic-workstation/src/views/LogicTool.vue","webpack://logic-workstation/./src/views/LogicTool.vue?f23b","webpack://logic-workstation/./src/views/LogicTool.vue","webpack://logic-workstation/./src/router/index.js","webpack://logic-workstation/./src/store/index.js","webpack://logic-workstation/./src/main.js","webpack://logic-workstation/webpack/bootstrap","webpack://logic-workstation/webpack/runtime/chunk loaded","webpack://logic-workstation/webpack/runtime/compat get default export","webpack://logic-workstation/webpack/runtime/define property getters","webpack://logic-workstation/webpack/runtime/ensure chunk","webpack://logic-workstation/webpack/runtime/get javascript chunk filename","webpack://logic-workstation/webpack/runtime/get mini-css chunk filename","webpack://logic-workstation/webpack/runtime/global","webpack://logic-workstation/webpack/runtime/hasOwnProperty shorthand","webpack://logic-workstation/webpack/runtime/load script","webpack://logic-workstation/webpack/runtime/make namespace object","webpack://logic-workstation/webpack/runtime/publicPath","webpack://logic-workstation/webpack/runtime/jsonp chunk loading","webpack://logic-workstation/webpack/startup"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('nav',[_c('router-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"逻辑公式化简与真值表\")]),_vm._v(\" | \"),_c('router-link',{attrs:{\"to\":\"/about\"}},[_vm._v(\"使用说明\")])],1),_c('keep-alive',[_c('router-view')],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=d5fcbae4&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',[_c('input',{directives:[{name:\"model\",rawName:\"v-model.lazy\",value:(_vm.input),expression:\"input\",modifiers:{\"lazy\":true}}],attrs:{\"id\":\"formula_input\",\"type\":\"text\"},domProps:{\"value\":(_vm.input)},on:{\"change\":function($event){_vm.input=$event.target.value}}}),_c('button',{attrs:{\"id\":\"formula_submit\"},on:{\"click\":_vm.submitFormula}},[_vm._v(\"确定\")])]),_c('div',{attrs:{\"id\":\"formula_show\"}},[_c('div',[_vm._v(\"识别到公式：\"+_vm._s(_vm.wellFormedUtil.formulaString()))]),_c('div',[_vm._v(\"最简合取式：\"+_vm._s(_vm.wellFormedUtil.simplifiedConjunctionString()))]),_c('div',[_vm._v(\"最简析取式：\"+_vm._s(_vm.wellFormedUtil.simplifiedDisjunctionString()))])]),_c('div',[(_vm.wellFormedUtil.trueTableShowAble())?_c('div',[_c('div',[_vm._v(\"原始真值表\")]),_c('table',{staticClass:\"true_table\"},[_vm._l((_vm.wellFormedUtil.trueTable.head),function(th){return _c('th',[_vm._v(_vm._s(th))])}),_vm._l((_vm.wellFormedUtil.trueTable.body),function(tr){return _c('tr',_vm._l((tr),function(td){return _c('td',[_vm._v(_vm._s(td))])}),0)})],2)]):_c('div',[_vm._v(\" 原始真值表过长，请参考以下简化的真值表： \")]),_c('div',[_c('div',[_vm._v(\"简化的真值表\")]),_c('table',{staticClass:\"true_table\"},[_vm._l((_vm.wellFormedUtil.simplifiedTrueTable.head),function(th){return _c('th',[_vm._v(\" \"+_vm._s(th)+\" \")])}),_vm._l((_vm.wellFormedUtil.simplifiedTrueTable.body),function(tr){return _c('tr',_vm._l((tr),function(td){return _c('td',[_vm._v(\" \"+_vm._s(td)+\" \")])}),0)})],2)])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","class StringOrder {\r\n    stringIndexMap = new Map();\r\n    stringArray = [];\r\n\r\n    get length() {\r\n        return this.stringArray.length;\r\n    }\r\n\r\n    push(value) {\r\n        if (this.stringIndexMap.has(value)) {\r\n            return false;\r\n        }\r\n        let length = this.stringArray.push(value);\r\n        this.stringIndexMap.set(value, length - 1);\r\n        return true;\r\n    }\r\n\r\n    pushAll(stringOrder) {\r\n        stringOrder.stringArray.forEach(string => this.push(string));\r\n    }\r\n\r\n    getIndexOf(value) {\r\n        return this.stringIndexMap.get(value);\r\n    }\r\n\r\n    getValueOf(index) {\r\n        return this.stringArray[index];\r\n    }\r\n}\r\n\r\nexport {StringOrder}\r\n\r\n\r\n/*test getIndexOf getValueOf\r\nlet order = new StringOrder();\r\norder.push('abc');\r\norder.push('bcd');\r\norder.push('cde');\r\nconsole.log('abc', order\r\n    .getIndexOf('bcd'));\r\nconsole.log(2, order.getValueOf(2))\r\n//test getIndexOf getValueOf*/","import {StringOrder} from \"@/logic/string-order\";\r\n\r\nclass WellFormed {\r\n    date = {\r\n        atomicPropositionOrder: undefined\r\n    }\r\n\r\n    get atomicPropositionOrder() {\r\n        if (this.date.atomicPropositionOrder !== undefined) {\r\n            return this.date.atomicPropositionOrder;\r\n        } else {\r\n            return this.date.atomicPropositionOrder = this.getDefaultAtomicPropositionOrder();\r\n        }\r\n    }\r\n\r\n    set atomicPropositionOrder(value) {\r\n    }\r\n\r\n    inverse() {\r\n        return new Negation(this).inward();\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    inward() {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        throw 'need implementation';\r\n    }\r\n\r\n    toString() {\r\n        throw 'need implementation';\r\n    }\r\n}\r\n\r\nclass True extends WellFormed {\r\n    static instance = new True();\r\n\r\n    constructor() {\r\n        super();\r\n        if (True.instance !== undefined) {\r\n            return True.instance;\r\n        }\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        return new StringOrder();\r\n    }\r\n\r\n    inverse() {\r\n        return new False();\r\n    }\r\n\r\n    inward() {\r\n        return new True();\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return true;\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return 'true';\r\n    }\r\n\r\n    toString() {\r\n        return 'true';\r\n    }\r\n}\r\n\r\nclass False extends WellFormed {\r\n    static instance = new False();\r\n\r\n    constructor() {\r\n        super();\r\n        if (False.instance !== undefined) {\r\n            return False.instance;\r\n        }\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        return new StringOrder();\r\n    }\r\n\r\n    inverse() {\r\n        return new True();\r\n    }\r\n\r\n    inward() {\r\n        return new False();\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return false;\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return 'false';\r\n    }\r\n\r\n    toString() {\r\n        return 'false';\r\n    }\r\n}\r\n\r\nclass AtomicProposition extends WellFormed {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        order.push(this.name);\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return this;\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return assignment.get(this.name);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return this.name;\r\n    }\r\n\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\n\r\nclass Negation extends WellFormed {\r\n    constructor(item) {\r\n        super();\r\n        this.item = item;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        return this.item.atomicPropositionOrder;\r\n    }\r\n\r\n    inverse() {\r\n        return this.item.inward();\r\n    }\r\n\r\n    inward() {\r\n        switch (this.item.constructor) {\r\n            case True:\r\n                return new False();\r\n            case False:\r\n                return new True();\r\n            case AtomicProposition:\r\n                return this;\r\n            case Negation:\r\n                return this.item.item.inward();\r\n            case Conjunction:\r\n                return new Disjunction(...this.item.conjuncts.map(conjunct => conjunct.inverse()));\r\n            case Disjunction:\r\n                return new Conjunction(...this.item.disjuncts.map(disjunct => disjunct.inverse()));\r\n            case Implication:\r\n                return new Disjunction(new Negation(this.item.antecedent), this.item.consequent).inverse();\r\n            case IFF:\r\n                return new Conjunction(new Implication(this.item.condition1, this.item.condition2), new Implication(this.item.condition2, this.item.condition1)).inverse();\r\n            default:\r\n                throw 'negation inward error';\r\n        }\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return !this.item.boolFunction(assignment);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        if (wellFormed instanceof Negation || this.item instanceof AtomicProposition) {\r\n            return this.toString();\r\n        }\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return `¬${this.item.toStringInside(this)}`;\r\n    }\r\n}\r\n\r\nclass Conjunction extends WellFormed {\r\n    constructor(...conjuncts) {\r\n        super();\r\n        //debug\r\n        if (conjuncts.length < 2) {\r\n            throw 'conjunction create error';\r\n        }\r\n        //debug*/\r\n        this.conjuncts = conjuncts;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        this.conjuncts.forEach(conjunct => {\r\n            order.pushAll(conjunct.atomicPropositionOrder);\r\n        })\r\n        return order;\r\n    }\r\n\r\n\r\n    inward() {\r\n        return new Conjunction(...this.conjuncts.map(conjunct => conjunct.inward()));\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return !this.conjuncts.some(conjunct => !conjunct.boolFunction(assignment));\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return this.conjuncts.map(conjunct => conjunct.toStringInside(this)).join('∧');\r\n    }\r\n}\r\n\r\nclass Disjunction extends WellFormed {\r\n    constructor(...disjuncts) {\r\n        super();\r\n        //debug\r\n        if (disjuncts.length < 2) throw'disjunction create error';\r\n        //debug*/\r\n        this.disjuncts = disjuncts;\r\n    }\r\n\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        this.disjuncts.forEach(disjunct => {\r\n            order.pushAll(disjunct.atomicPropositionOrder);\r\n        });\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return new Disjunction(...this.disjuncts.map(disjunct => disjunct.inward()));\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return this.disjuncts.some(disjunct => disjunct.boolFunction(assignment));\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return this.disjuncts.map(disjunct => disjunct.toStringInside(this)).join('∨');\r\n    }\r\n\r\n}\r\n\r\nclass Implication extends WellFormed {\r\n    constructor(antecedent, consequent) {\r\n        super();\r\n        this.antecedent = antecedent;\r\n        this.consequent = consequent;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        order.pushAll(this.antecedent.atomicPropositionOrder);\r\n        order.pushAll(this.consequent.atomicPropositionOrder);\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return new Implication(this.antecedent.inward(), this.consequent.inward());\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return !this.antecedent.boolFunction(assignment) || this.consequent.boolFunction(assignment);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.antecedent.toStringInside(this)}→${this.consequent.toStringInside(this)}`;\r\n    }\r\n\r\n    toDisjunction() {\r\n        return new Disjunction(new Negation(this.antecedent), this.consequent);\r\n    }\r\n}\r\n\r\nclass IFF extends WellFormed {\r\n    constructor(condition1, condition2) {\r\n        super();\r\n        this.condition1 = condition1;\r\n        this.condition2 = condition2;\r\n    }\r\n\r\n    getDefaultAtomicPropositionOrder() {\r\n        let order = new StringOrder();\r\n        order.pushAll(this.condition1.atomicPropositionOrder);\r\n        order.pushAll(this.condition2.atomicPropositionOrder);\r\n        return order;\r\n    }\r\n\r\n    inward() {\r\n        return new IFF(this.condition1.inward(), this.condition2.inward());\r\n    }\r\n\r\n    boolFunction(assignment) {\r\n        return this.condition1.boolFunction(assignment) === this.condition2.boolFunction(assignment);\r\n    }\r\n\r\n    toStringInside(wellFormed) {\r\n        return `(${this.toString()})`;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.condition1.toStringInside(this)}↔${this.condition2.toStringInside(this)}`;\r\n    }\r\n\r\n    toConjunction() {\r\n        return new Conjunction(new Implication(this.condition1, this.condition2), new Implication(this.condition2, this.condition1));\r\n    }\r\n}\r\n\r\nexport {WellFormed, True, False, AtomicProposition, Negation, Conjunction, Disjunction, IFF, Implication}\r\n\r\n\r\n//import compiler from \"@/logic/formula/compiler\";\r\n/*test toString\r\nlet true_ = compiler.parse('true');\r\nconsole.log(true_.toString());\r\nlet f = compiler.parse('false');\r\nconsole.log(f.toString());\r\nlet and = compiler.parse('(a and b) and c');\r\nconsole.log(and.toString());\r\nlet or = compiler.parse('a or (b or c)');\r\nconsole.log(or.toString());\r\nlet andor = compiler.parse('a or b and c or d');\r\nconsole.log(andor.toString());\r\nlet imp = compiler.parse('a -> b');\r\nconsole.log(imp.toString());\r\nlet iff = compiler.parse('a <-> b');\r\nconsole.log(iff.toString());\r\nlet not = compiler.parse('not (a <-> b)');\r\nconsole.log(not.toString());\r\n//test toString*/\r\n\r\n/*test inward inverse\r\nlet true_ = compiler.parse('true');\r\nconsole.log(true_.inverse().toString());\r\nlet f = compiler.parse('false');\r\nconsole.log(f.inverse().toString());\r\nlet and = compiler.parse('(a and b) and c');\r\nconsole.log(and.inverse().toString());\r\nlet or = compiler.parse('a or (b or c)');\r\nconsole.log(or.inverse().toString());\r\nlet andor = compiler.parse('a or b and c or d');\r\nconsole.log(andor.inverse().toString());\r\nlet imp = compiler.parse('a -> b');\r\nconsole.log(imp.inverse().toString());\r\nlet iff = compiler.parse('a <-> b');\r\nconsole.log(iff.inverse().toString());\r\nlet not = compiler.parse('not (a <-> b)');\r\nconsole.log(not.inverse().toString());\r\nlet inward = compiler.parse('not not a');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('(not a and not (c and d))');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('(not a or not not (c or d))');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('not(a-> b)');\r\nconsole.log(inward.inward().toString());\r\ninward = compiler.parse('not(a<->not b)');\r\nconsole.log(inward.inward().toString());\r\n//test inward inverse*/\r\n\r\n/*test atomicProposition\r\nlet test = compiler.parse('a');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a and b and c or b');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a or b and c');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a -> b and c');\r\nconsole.log(test.atomicPropositionOrder);\r\ntest = compiler.parse('a <-> b and c');\r\nconsole.log(test.atomicPropositionOrder);\r\nlet order1 = test.atomicPropositionOrder;\r\ntest = compiler.parse('a');\r\ntest.atomicPropositionOrder = order1;\r\nconsole.log(test.atomicPropositionOrder);\r\nconsole.log(test.atomicPropositionOrder);\r\nconsole.log(test.atomicPropositionOrder);\r\n//test atomicProposition*/\r\n\r\n/*test boolFunction\r\nimport {AssignmentCreator} from \"@/logic/assignment-creator\";\r\n\r\nlet test = compiler.parse('a and b or c -> not (d<->e) ');\r\nlet assignmentCreator = new AssignmentCreator(test.atomicPropositionOrder);\r\nlet assignment = assignmentCreator.createAssignmentFromIntValue(20);\r\nconsole.log(test.boolFunction(assignment));\r\n//test boolFunction*/","import {\n    True, False, AtomicProposition, Negation, Conjunction, Disjunction, IFF, Implication\n} from '@/logic/well-formed';\n\nvar compiler = (function () {\n    var o = function (k, v, o, l) {\n            for (o = o || {}, l = k.length; l--; o[k[l]] = v) ;\n            return o\n        }, $V0 = [1, 6], $V1 = [1, 7], $V2 = [1, 8], $V3 = [1, 4], $V4 = [1, 5], $V5 = [1, 9], $V6 = [1, 10], $V7 = [1, 11],\n        $V8 = [1, 12], $V9 = [1, 9, 10, 11, 12, 14], $Va = [1, 14];\n    var parser = {\n        trace: function trace() {\n        },\n        yy: {},\n        symbols_: {\n            \"error\": 2,\n            \"p\": 3,\n            \"identifier\": 4,\n            \"true\": 5,\n            \"false\": 6,\n            \"exp\": 7,\n            \"﹁\": 8,\n            \"→\": 9,\n            \"↔\": 10,\n            \"∨\": 11,\n            \"∧\": 12,\n            \"(\": 13,\n            \")\": 14,\n            \"res\": 15,\n            \"$accept\": 0,\n            \"$end\": 1\n        },\n        terminals_: {\n            2: \"error\",\n            4: \"identifier\",\n            5: \"true\",\n            6: \"false\",\n            8: \"﹁\",\n            9: \"→\",\n            10: \"↔\",\n            11: \"∨\",\n            12: \"∧\",\n            13: \"(\",\n            14: \")\"\n        },\n        productions_: [0, [3, 1], [3, 1], [3, 1], [7, 1], [7, 2], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [15, 1]],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n            /* this == yyval */\n\n            var $0 = $$.length - 1;\n            switch (yystate) {\n                case 1:\n                    this.$ = new AtomicProposition($$[$0]);\n                    break;\n                case 2:\n                    this.$ = new True();\n                    break;\n                case 3:\n                    this.$ = new False();\n                    break;\n                case 5:\n                    this.$ = new Negation($$[$0]);\n                    break;\n                case 6:\n                    this.$ = new Implication($$[$0 - 2], $$[$0]);\n                    break;\n                case 7:\n                    this.$ = new IFF($$[$0 - 2], $$[$0]);\n                    break;\n                case 8:\n\n                    let disjuncts = [];\n                    if ($$[$0 - 2] instanceof Disjunction && $$[$0 - 2].enclosed === undefined) {\n                        $$[$0 - 2].disjuncts.forEach(disjunct => {\n                            disjuncts.push(disjunct);\n                        });\n                    } else {\n                        disjuncts.push($$[$0 - 2]);\n                    }\n                    if ($$[$0] instanceof Disjunction && $$[$0].enclosed === undefined) {\n                        $$[$0].disjuncts.forEach(disjunct => {\n                            disjuncts.push(disjunct);\n                        });\n                    } else {\n                        disjuncts.push($$[$0]);\n                    }\n                    this.$ = new Disjunction(...disjuncts);\n\n                    break;\n                case 9:\n\n                    let conjuncts = [];\n                    if ($$[$0 - 2] instanceof Conjunction && $$[$0 - 2].enclosed === undefined) {\n                        $$[$0 - 2].conjuncts.forEach(conjunct => {\n                            conjuncts.push(conjunct);\n                        });\n                    } else {\n                        conjuncts.push($$[$0 - 2]);\n                    }\n                    if ($$[$0] instanceof Conjunction && $$[$0].enclosed === undefined) {\n                        $$[$0].conjuncts.forEach(conjunct => {\n                            conjuncts.push(conjunct);\n                        });\n                    } else {\n                        conjuncts.push($$[$0]);\n                    }\n                    this.$ = new Conjunction(...conjuncts);\n\n                    break;\n                case 10:\n                    $$[$0 - 1].enclosed = true;\n                    this.$ = $$[$0 - 1];\n                    break;\n                case 11:\n                    return this.$ = $$[$0];\n                    break;\n            }\n        },\n        table: [{3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 2, 8: $V3, 13: $V4, 15: 1}, {1: [3]}, {\n            1: [2, 11], 9: $V5, 10: $V6, 11: $V7, 12: $V8\n        }, o($V9, [2, 4]), {3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 13, 8: $V3, 13: $V4}, {\n            3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 14, 8: $V3, 13: $V4\n        }, o($V9, [2, 1]), o($V9, [2, 2]), o($V9, [2, 3]), {\n            3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 15, 8: $V3, 13: $V4\n        }, {3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 16, 8: $V3, 13: $V4}, {\n            3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 17, 8: $V3, 13: $V4\n        }, {3: 3, 4: $V0, 5: $V1, 6: $V2, 7: 18, 8: $V3, 13: $V4}, o($V9, [2, 5]), {\n            9: $V5, 10: $V6, 11: $V7, 12: $V8, 14: [1, 19]\n        }, o($Va, [2, 6], {11: $V7, 12: $V8}), o($Va, [2, 7], {\n            11: $V7, 12: $V8\n        }), o([1, 9, 10, 11, 14], [2, 8], {12: $V8}), o($V9, [2, 9]), o($V9, [2, 10])],\n        defaultActions: {},\n        parseError: function parseError(str, hash) {\n            if (hash.recoverable) {\n                this.trace(str);\n            } else {\n                var error = new Error(str);\n                error.hash = hash;\n                throw error;\n            }\n        },\n        parse: function parse(input) {\n            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '',\n                yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n            var args = lstack.slice.call(arguments, 1);\n            var lexer = Object.create(this.lexer);\n            var sharedState = {yy: {}};\n            for (var k in this.yy) {\n                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n                    sharedState.yy[k] = this.yy[k];\n                }\n            }\n            lexer.setInput(input, sharedState.yy);\n            sharedState.yy.lexer = lexer;\n            sharedState.yy.parser = this;\n            if (typeof lexer.yylloc == 'undefined') {\n                lexer.yylloc = {};\n            }\n            var yyloc = lexer.yylloc;\n            lstack.push(yyloc);\n            var ranges = lexer.options && lexer.options.ranges;\n            if (typeof sharedState.yy.parseError === 'function') {\n                this.parseError = sharedState.yy.parseError;\n            } else {\n                this.parseError = Object.getPrototypeOf(this).parseError;\n            }\n\n            function popStack(n) {\n                stack.length = stack.length - 2 * n;\n                vstack.length = vstack.length - n;\n                lstack.length = lstack.length - n;\n            }\n\n            _token_stack:\n                var lex = function () {\n                    var token;\n                    token = lexer.lex() || EOF;\n                    if (typeof token !== 'number') {\n                        token = self.symbols_[token] || token;\n                    }\n                    return token;\n                };\n            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n            while (true) {\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == 'undefined') {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === 'undefined' || !action.length || !action[0]) {\n                    var errStr = '';\n                    expected = [];\n                    for (p in table[state]) {\n                        if (this.terminals_[p] && p > TERROR) {\n                            expected.push('\\'' + this.terminals_[p] + '\\'');\n                        }\n                    }\n                    if (lexer.showPosition) {\n                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                    } else {\n                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                    }\n                    this.parseError(errStr, {\n                        text: lexer.match,\n                        token: this.terminals_[symbol] || symbol,\n                        line: lexer.yylineno,\n                        loc: yyloc,\n                        expected: expected\n                    });\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n                }\n                switch (action[0]) {\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(lexer.yytext);\n                        lstack.push(lexer.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        if (!preErrorSymbol) {\n                            yyleng = lexer.yyleng;\n                            yytext = lexer.yytext;\n                            yylineno = lexer.yylineno;\n                            yyloc = lexer.yylloc;\n                            if (recovering > 0) {\n                                recovering--;\n                            }\n                        } else {\n                            symbol = preErrorSymbol;\n                            preErrorSymbol = null;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = {\n                            first_line: lstack[lstack.length - (len || 1)].first_line,\n                            last_line: lstack[lstack.length - 1].last_line,\n                            first_column: lstack[lstack.length - (len || 1)].first_column,\n                            last_column: lstack[lstack.length - 1].last_column\n                        };\n                        if (ranges) {\n                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n                        }\n                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n                        if (typeof r !== 'undefined') {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n\n    //import {True, False, AtomicProposition, Negation, Conjunction, Disjunction, IFF, Implication} from '@/logic/formula/well-formed';\n    /* generated by jison-lex 0.3.4 */\n    var lexer = (function () {\n        var lexer = ({\n\n            EOF: 1,\n\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n\n// resets the lexer, sets new input\n            setInput: function (input, yy) {\n                this.yy = yy || this.yy || {};\n                this._input = input;\n                this._more = this._backtrack = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = '';\n                this.conditionStack = ['INITIAL'];\n                this.yylloc = {\n                    first_line: 1, first_column: 0, last_line: 1, last_column: 0\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [0, 0];\n                }\n                this.offset = 0;\n                return this;\n            },\n\n// consumes and returns one char from the input\n            input: function () {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) {\n                    this.yylloc.range[1]++;\n                }\n\n                this._input = this._input.slice(1);\n                return ch;\n            },\n\n// unshifts one char (or a string) into the input\n            unput: function (ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len);\n                //this.yyleng -= len;\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n\n                if (lines.length - 1) {\n                    this.yylineno -= lines.length - 1;\n                }\n                var r = this.yylloc.range;\n\n                this.yylloc = {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n                };\n\n                if (this.options.ranges) {\n                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n                }\n                this.yyleng = this.yytext.length;\n                return this;\n            },\n\n// When called from action, caches matched text and appends it on next action\n            more: function () {\n                this._more = true;\n                return this;\n            },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n            reject: function () {\n                if (this.options.backtrack_lexer) {\n                    this._backtrack = true;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                        text: \"\", token: null, line: this.yylineno\n                    });\n\n                }\n                return this;\n            },\n\n// retain first n characters of the match\n            less: function (n) {\n                this.unput(this.match.slice(n));\n            },\n\n// displays already matched input, i.e. for error messages\n            pastInput: function () {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n            },\n\n// displays upcoming input, i.e. for error messages\n            upcomingInput: function () {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n            },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\n            showPosition: function () {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\n            test_match: function (match, indexed_rule) {\n                var token, lines, backup;\n\n                if (this.options.backtrack_lexer) {\n                    // save context\n                    backup = {\n                        yylineno: this.yylineno,\n                        yylloc: {\n                            first_line: this.yylloc.first_line,\n                            last_line: this.last_line,\n                            first_column: this.yylloc.first_column,\n                            last_column: this.yylloc.last_column\n                        },\n                        yytext: this.yytext,\n                        match: this.match,\n                        matches: this.matches,\n                        matched: this.matched,\n                        yyleng: this.yyleng,\n                        offset: this.offset,\n                        _more: this._more,\n                        _input: this._input,\n                        yy: this.yy,\n                        conditionStack: this.conditionStack.slice(0),\n                        done: this.done\n                    };\n                    if (this.options.ranges) {\n                        backup.yylloc.range = this.yylloc.range.slice(0);\n                    }\n                }\n\n                lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno += lines.length;\n                }\n                this.yylloc = {\n                    first_line: this.yylloc.last_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.last_column,\n                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n                };\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                if (this.options.ranges) {\n                    this.yylloc.range = [this.offset, this.offset += this.yyleng];\n                }\n                this._more = false;\n                this._backtrack = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n                if (this.done && this._input) {\n                    this.done = false;\n                }\n                if (token) {\n                    return token;\n                } else if (this._backtrack) {\n                    // recover context\n                    for (var k in backup) {\n                        this[k] = backup[k];\n                    }\n                    return false; // rule action called reject() implying the next rule should be tested instead.\n                }\n                return false;\n            },\n\n// return next match in input\n            next: function () {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) {\n                    this.done = true;\n                }\n\n                var token, match, tempMatch, index;\n                if (!this._more) {\n                    this.yytext = '';\n                    this.match = '';\n                }\n                var rules = this._currentRules();\n                for (var i = 0; i < rules.length; i++) {\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (this.options.backtrack_lexer) {\n                            token = this.test_match(tempMatch, rules[i]);\n                            if (token !== false) {\n                                return token;\n                            } else if (this._backtrack) {\n                                match = false;\n                                continue; // rule action called reject() implying a rule MISmatch.\n                            } else {\n                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                                return false;\n                            }\n                        } else if (!this.options.flex) {\n                            break;\n                        }\n                    }\n                }\n                if (match) {\n                    token = this.test_match(match, rules[index]);\n                    if (token !== false) {\n                        return token;\n                    }\n                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                    return false;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                        text: \"\", token: null, line: this.yylineno\n                    });\n                }\n            },\n\n// return next match that has a token\n            lex: function lex() {\n                var r = this.next();\n                if (r) {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n\n// pop the previously active lexer condition state off the condition stack\n            popState: function popState() {\n                var n = this.conditionStack.length - 1;\n                if (n > 0) {\n                    return this.conditionStack.pop();\n                } else {\n                    return this.conditionStack[0];\n                }\n            },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n            _currentRules: function _currentRules() {\n                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n                } else {\n                    return this.conditions[\"INITIAL\"].rules;\n                }\n            },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n            topState: function topState(n) {\n                n = this.conditionStack.length - 1 - Math.abs(n || 0);\n                if (n >= 0) {\n                    return this.conditionStack[n];\n                } else {\n                    return \"INITIAL\";\n                }\n            },\n\n// alias for begin(condition)\n            pushState: function pushState(condition) {\n                this.begin(condition);\n            },\n\n// return the number of states currently on the stack\n            stateStackSize: function stateStackSize() {\n                return this.conditionStack.length;\n            },\n            options: {},\n            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n                var YYSTATE = YY_START;\n                switch ($avoiding_name_collisions) {\n                    case 0:/*skip*/\n                        break;\n                    case 1:\n                        return 5;\n                        break;\n                    case 2:\n                        return 6;\n                        break;\n                    case 3:\n                        return 'num';\n                        break;\n                    case 4:\n                        return ',';\n                        break;\n                    case 5:\n                        return 13;\n                        break;\n                    case 6:\n                        return 14;\n                        break;\n                    case 7:\n                        return yy_.yytext = '→';\n                        break;\n                    case 8:\n                        return yy_.yytext = '↔';\n                        break;\n                    case 9:\n                        return yy_.yytext = '∧';\n                        break;\n                    case 10:\n                        return yy_.yytext = '∨';\n                        break;\n                    case 11:\n                        return yy_.yytext = '﹁';\n                        break;\n                    case 12:\n                        return 4;\n                        break;\n                }\n            },\n            rules: [/^(?:\\s+)/, /^(?:[tT][rR][uU][eE])/, /^(?:[fF][aA][lL][sS][eE])/, /^(?:[0-9]+(\\.[0-9]+)?)/, /^(?:,|，)/, /^(?:\\(|（)/, /^(?:\\)|）)/, /^(?:(-|=|>)+?>|→)/, /^(?:iff|<(-|=)?>|↔)/, /^(?:([aA][nN][dD])|(&+)|∧|∧)/, /^(?:([oO][rR])|(\\|+)|∨)/, /^(?:([nN][oO][tT])|!|！|﹁|¬)/, /^(?:(\\w|[\\u4e00-\\u9fa5]|;|；)+)/],\n            conditions: {\"INITIAL\": {\"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"inclusive\": true}}\n        });\n        return lexer;\n    })();\n    parser.lexer = lexer;\n\n    function Parser() {\n        this.yy = {};\n    }\n\n    Parser.prototype = parser;\n    parser.Parser = Parser;\n    return new Parser;\n})();\nlet exports = {};\nexports.parser = compiler;\nexports.Parser = compiler.Parser;\nexports.parse = function () {\n    return compiler.parse.apply(compiler, arguments);\n};\nexport default exports;","class Assignment extends Map {\r\n    /**\r\n     *\r\n     * @param atomicPropositionOrder\r\n     */\r\n    getIntValue(atomicPropositionOrder) {\r\n        let value = 0;\r\n        let length = atomicPropositionOrder.length;\r\n        this.forEach((trueValue, atomic) => {\r\n            if (trueValue) {\r\n                value += 2 ** (length - 1 - atomicPropositionOrder.getIndexOf(atomic));\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n}\r\n\r\nexport {Assignment}\r\n\r\n/*test getIntValue\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a')\r\norder.push('b')\r\norder.push('c')\r\nlet assignment = new Assignment();\r\nassignment.set('a', true);\r\nassignment.set('c', false);\r\nassignment.set('b', true)\r\nconsole.log(assignment.getIntValue(order));\r\n//test getIntValue*/\r\n","import {Assignment} from \"@/logic/assignment\";\r\n\r\nclass AssignmentCreator {\r\n    constructor(atomicPropositionOrder) {\r\n        this.atomicPropositionOrder = atomicPropositionOrder;\r\n    }\r\n\r\n    createAssignmentFromIntValue(intValue) {\r\n        let binaryValueArray = intValue.toString(2).split('').map((v) => {\r\n            switch (v) {\r\n                case '0':\r\n                    return false;\r\n                case '1':\r\n                    return true;\r\n                //debug\r\n                default:\r\n                    throw 'getAssignmentByIntValue value error';\r\n                //debug*/\r\n            }\r\n        });\r\n        let length = this.atomicPropositionOrder.length;\r\n        while (binaryValueArray.length < length) {\r\n            binaryValueArray.unshift(false);\r\n        }\r\n        let assignment = new Assignment();\r\n        for (let i = 0; i < length; i++) {\r\n            assignment.set(this.atomicPropositionOrder.getValueOf(i), binaryValueArray[i]);\r\n        }\r\n        return assignment;\r\n    }\r\n}\r\n\r\nexport {AssignmentCreator}\r\n\r\n/*test createAssignmentFromIntValue\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet assignmentCreator = new AssignmentCreator(order);\r\nconsole.log(assignmentCreator.createAssignmentFromIntValue(5));\r\nconsole.log(assignmentCreator.createAssignmentFromIntValue(0));\r\n//test createAssignmentFromIntValue*/","import {Coverage} from \"@/logic/coverage\";\r\n\r\nclass CoveragesChooser {\r\n    constructor(coverages) {\r\n        if (coverages.length === 0 || coverages.length === undefined) {\r\n            throw 'CoveragesChooser init error';\r\n        }\r\n        this.coverages = coverages;\r\n        this.current = -1;\r\n        this.total = 1;\r\n        this.lengths = coverages.map(coverage => coverage.length);\r\n        this.lengths.forEach((length) => {\r\n            this.total *= length;\r\n        });\r\n        this.choose = [];\r\n        for (let i = 0; i < this.lengths.length; i++) {\r\n            this.choose[i] = 0;\r\n        }\r\n    }\r\n\r\n    hasNext() {\r\n        return this.current < this.total;\r\n    }\r\n\r\n    next() {\r\n        this.current++;\r\n        let choose = this.choose;\r\n        for (let i = choose.length - 1; i > 0; i--) {\r\n            if (choose[i] + 1 === this.lengths[i]) {\r\n                choose[i] = 0;\r\n            } else {\r\n                choose[i] += 1;\r\n                break;\r\n            }\r\n        }\r\n        let result = new Coverage();\r\n        this.coverages.forEach((coverage, index) => {\r\n            result.push(coverage.mintermArray[this.choose[index]]);\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nexport {CoveragesChooser}\r\n\r\n/*test next\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nconsole.log('start')\r\nlet param = [];\r\nlet coverage1 = new Coverage();\r\ncoverage1.push(new Minterm('1**'));\r\ncoverage1.push(new Minterm('01*'));\r\nlet coverage2 = new Coverage();\r\ncoverage2.push(new Minterm('01*'));\r\ncoverage2.push(new Minterm('1*0'));\r\nlet coverage3 = new Coverage();\r\ncoverage3.push(new Minterm('1**'))\r\ncoverage3.push(new Minterm('**0'))\r\ncoverage3.push(new Minterm('0*0'))\r\nparam.push(coverage1)\r\nparam.push(coverage2)\r\nparam.push(coverage3)\r\nlet chooser = new CoveragesChooser(param);\r\nwhile (chooser.hasNext()) {\r\n    console.log(1)\r\n    console.log(chooser.next().mintermValueSet);\r\n}\r\n//test next*/","import {Coverage} from \"@/logic/coverage\";\r\n\r\nclass Minterm {\r\n    constructor(v = undefined) {\r\n        if (v !== undefined) {\r\n            //debug\r\n            if (v.match(/[^10*-]/) !== null) {\r\n                throw 'invalid minterm';\r\n            }\r\n            //debug*/\r\n            this.value = v.toString();\r\n        }\r\n    }\r\n\r\n    equals(minterm) {\r\n        return this.value === minterm.value;\r\n    }\r\n\r\n    isFALSE() {\r\n        return this.value === '-'.repeat(this.value.length);\r\n    }\r\n\r\n    conjunct(minterm) {\r\n        //debug\r\n        if (this.value === undefined || minterm.value === undefined) throw 'not initialized'\r\n        if (this.value.length !== minterm.value.length) throw 'invalid conjunct';\r\n        //debug*/\r\n        if (this.isFALSE()) {\r\n            return this;\r\n        }\r\n        if (minterm.isFALSE()) {\r\n            return minterm;\r\n        }\r\n        if (this.equals(minterm)) {\r\n            return this;\r\n        }\r\n        let length = this.value.length;\r\n        let resultValue = '';\r\n        for (let i = 0; i < length; i++) {\r\n            let this_i = this.value[i];\r\n            let minterm_i = minterm.value[i];\r\n            if (this_i === minterm_i) {\r\n                resultValue += this_i;\r\n            } else {\r\n                if (this_i === '*') {\r\n                    resultValue += minterm_i;\r\n                } else if (minterm_i === '*') {\r\n                    resultValue += this_i;\r\n                } else {\r\n                    return new Minterm('-'.repeat(this.value.length));\r\n                }\r\n            }\r\n        }\r\n        let result = new Minterm();\r\n        result.value = resultValue;\r\n        return result;\r\n    }\r\n\r\n    starCount() {\r\n        let length = this.value.length;\r\n        let count = 0\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.value[i] === '*') {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    combineSub(minterm) {\r\n        if (this.isFALSE()) {\r\n            return this;\r\n        }\r\n        if (minterm.isFALSE()) {\r\n            return minterm;\r\n        }\r\n        let tag = true;\r\n        let length = this.value.length;\r\n        let resultValue = '';\r\n        for (let i = 0; i < length; i++) {\r\n            let this_i = this.value[i];\r\n            let minterm_i = minterm.value[i];\r\n            if (this_i === minterm_i) {\r\n                resultValue += this_i;\r\n            } else {\r\n                if (this_i === '*') {\r\n                    resultValue += minterm_i\r\n                } else if (minterm_i === '*') {\r\n                    resultValue += this_i;\r\n                } else if (tag) {\r\n                    resultValue += '*';\r\n                    tag = false;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        if (tag) {\r\n            return null;\r\n        }\r\n        let result = new Minterm();\r\n        result.value = resultValue;\r\n        return result;\r\n    }\r\n\r\n    cost(forConjunction = false) {\r\n        let _cost = -1;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            switch (this.value[i]) {\r\n                case '0':\r\n                    _cost += forConjunction ? 1 : 2;\r\n                    break;\r\n                case '1':\r\n                    _cost += forConjunction ? 2 : 1;\r\n                    break\r\n                default:\r\n            }\r\n        }\r\n        return _cost;\r\n    }\r\n\r\n    negate() {\r\n        let len = this.value.length;\r\n        if (this.isFALSE()) return new Minterm('*'.repeat(len));\r\n        if (this.value === '-'.repeat(len)) return new Minterm('-'.repeat(len))\r\n        let result = new Coverage();\r\n        for (let i = 0; i < len; i++) {\r\n            switch (this.value[i]) {\r\n                case '*':\r\n                    break;\r\n                case '0': {\r\n                    let valueArray = this.value.split('');\r\n                    valueArray[i] = '1';\r\n                    let newValue = valueArray.join('');\r\n                    result.push(new Minterm(newValue));\r\n                    break;\r\n                }\r\n                case '1': {\r\n                    let valueArray = this.value.split('');\r\n                    valueArray[i] = '0';\r\n                    let newValue = valueArray.join('');\r\n                    result.push(new Minterm(newValue));\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport {\r\n    Minterm\r\n}\r\n\r\n\r\n/*test conjunct\r\nlet m1 = new Minterm();\r\nm1.value = new String('1*0');\r\nlet m2 = new Minterm();\r\nm2.value = '*00';\r\nconsole.log('1*0 and *00', m1.conjunct(m2).value, m2.conjunct(m1).value);\r\nlet f = new Minterm();\r\nf.value = '---';\r\nconsole.log('---', f.conjunct(m1).value, m1.conjunct(f).value);\r\nlet m3 = new Minterm();\r\nm3.value = '*11';\r\nconsole.log('*00 and *11', m3.conjunct(m2), m2.conjunct(m3));\r\n//test conjunct*/\r\n\r\n/*test combineSub\r\nlet x, y;\r\n[x, y] = ['10*1', '11*1'];\r\nconsole.log(x, y, new Minterm(x).combineSub(new Minterm(y)).value);\r\n//test combineSub*/\r\n\r\n/*test cost\r\nlet x = new Minterm('---');\r\nconsole.log(x.cost());\r\n//test cost*/\r\n\r\n//test negate\r\n// console.log(new Minterm('10**0').negate());\r\n//test negate*/\r\n","import {CoveragesChooser} from \"@/logic/CoveragesChooser\";\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nclass Coverage {\r\n    mintermValueSet = new Set();\r\n    mintermArray = [];\r\n\r\n    get length() {\r\n        return this.mintermArray.length;\r\n    }\r\n\r\n    push(minterm) {\r\n        this.mintermValueSet.add(minterm.value);\r\n        if (this.mintermValueSet.size > this.mintermArray.length) {\r\n            this.mintermArray.push(minterm);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    disjunct(coverage) {\r\n        //debug\r\n        if (this.length === 0 || coverage.length === 0) throw 'coverage disjunct param error!';\r\n        //debug*/\r\n        let result = new Coverage();\r\n        this.mintermArray.forEach(v => result.push(v));\r\n        coverage.mintermArray.forEach(v => result.push(v));\r\n        return result;\r\n    }\r\n\r\n    conjunct(coverage) {\r\n        //debug\r\n        if (this.length === 0 || coverage.length === 0) throw 'coverage conjunct param error!';\r\n        //debug*/\r\n        let result = new Coverage();\r\n        this.mintermArray.forEach(minterm1 => {\r\n            coverage.mintermArray.forEach(minterm2 => {\r\n                result.push(minterm1.conjunct(minterm2));\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    delete(minterm) {\r\n        this.mintermValueSet.delete(minterm.value);\r\n        if (this.mintermValueSet.size < this.mintermArray.length) {\r\n            let index = this.mintermArray.findIndex((m) => {\r\n                return minterm.value === m.value;\r\n            });\r\n            this.mintermArray.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    deleteAll(coverage) {\r\n        coverage.mintermArray.forEach(v => this.delete(v));\r\n    }\r\n\r\n    fullLargestCoverage() {\r\n        if (this.length === 0) return this;\r\n        let result = new Coverage();\r\n        let startIndexes = [];\r\n        let length = this.length;\r\n        for (let i = 0; i < length; i++) {\r\n            result.push(this.mintermArray[i]);\r\n            startIndexes.push(1 + i);\r\n        }\r\n        let toDelete = new Coverage();\r\n        let i = 0;\r\n        do {\r\n            let minterm_i = result.mintermArray[i];\r\n            for (let j = startIndexes[i]; j < length; j++) {\r\n                let minterm_j = result.mintermArray[j];\r\n                let combineSub = minterm_i.combineSub(minterm_j);\r\n                if (combineSub !== null) {\r\n                    if (combineSub.conjunct(minterm_i).equals(minterm_i)) {\r\n                        toDelete.push(minterm_i);\r\n                    }\r\n                    if (combineSub.conjunct(minterm_j).equals(minterm_j)) {\r\n                        toDelete.push(minterm_j);\r\n                    }\r\n                    if (result.push(combineSub)) {\r\n                        startIndexes[i]++;\r\n                        startIndexes.push(result.length);\r\n                    }\r\n                }\r\n                startIndexes[i]++;\r\n            }\r\n            length = result.length;\r\n        } while ((i = startIndexes.findIndex(index => index < length)) !== -1);\r\n        result.deleteAll(toDelete);\r\n        return result;\r\n    }\r\n\r\n    isIntersectedWith(coverage) {\r\n        for (let i = 0; i < this.mintermArray.length; i++) {\r\n            for (let j = 0; j < coverage.mintermArray.length; j++) {\r\n                if (this.mintermArray[i].equals(coverage.mintermArray[j])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    cost(forConjuncion = false) {\r\n        let _cost = this.length - 1;\r\n        this.mintermArray.forEach((minterm) => {\r\n            _cost += minterm.cost(forConjuncion);\r\n        });\r\n        return _cost;\r\n    }\r\n\r\n    simplify(forConjunctive = false) {\r\n        let result = this.fullLargestCoverage();\r\n        let conjunctPairwise = new ConjunctPairwise(result);\r\n        result.deleteAll(conjunctPairwise.getLargestMultiOccupiedCoverage());\r\n        conjunctPairwise.deleteAllEntriesWhichValuesIntersectedWith(result);\r\n        if (conjunctPairwise.size === 0) {\r\n            return result;\r\n        } else if (result.length === 0) {\r\n            return conjunctPairwise.minimalCoverage(forConjunctive);\r\n        } else {\r\n            return result.disjunct(conjunctPairwise.minimalCoverage(forConjunctive));\r\n        }\r\n    }\r\n}\r\n\r\nclass ConjunctPairwise extends Map {\r\n    constructor(coverage) {\r\n        super();\r\n        if (!(coverage instanceof Coverage) || coverage.length === 0 || coverage.length === undefined) {\r\n            throw  'ConjunctPairwise init error'\r\n        }\r\n        this.mintermLength = coverage.mintermArray[0].value.length;\r\n        this.coverageMultiOccupied = new Coverage();\r\n        let mintermArray = coverage.mintermArray;\r\n        for (let i = 0; i < mintermArray.length; i++) {\r\n            let minterm_i = mintermArray[i];\r\n            for (let j = i + 1; j < mintermArray.length; j++) {\r\n                let minterm_j = mintermArray[j];\r\n                let mintermMultiOccupied = minterm_i.conjunct(minterm_j);\r\n                let key = mintermMultiOccupied.value;\r\n                this.coverageMultiOccupied.push(mintermMultiOccupied);\r\n                if (this.get(key) === undefined) {\r\n                    this.set(key, new Coverage());\r\n                }\r\n                let coverage = this.get(key);\r\n                coverage.push(minterm_i);\r\n                coverage.push(minterm_j);\r\n            }\r\n        }\r\n    }\r\n\r\n    getLargestMultiOccupiedCoverage() {\r\n        return this.coverageMultiOccupied.fullLargestCoverage();\r\n    }\r\n\r\n\r\n    delete(mintermMultiOccupied) {\r\n        super.delete(mintermMultiOccupied.value);\r\n        this.coverageMultiOccupied.delete(mintermMultiOccupied);\r\n    }\r\n\r\n    deleteAllEntriesWhichValuesIntersectedWith(coverage) {\r\n        let toDelete = new Set();\r\n        this.forEach((value, mintermMultiOccupied) => {\r\n            if (value.isIntersectedWith(coverage)) {\r\n                toDelete.add(mintermMultiOccupied);\r\n            }\r\n        });\r\n        toDelete.forEach(v => {\r\n            this.delete(new Minterm(v));\r\n        });\r\n        this.delete(new Minterm('-'.repeat(this.mintermLength)));\r\n    }\r\n\r\n    minimalCoverage(forConjunction = false) {\r\n        let param = [];\r\n        this.forEach(coverage => {\r\n            param.push(coverage);\r\n        });\r\n        let _cost = Number.MAX_SAFE_INTEGER;\r\n        let result = undefined;\r\n        let chooser = new CoveragesChooser(param);\r\n        if (chooser.total < 2 ** 12) {\r\n            while (chooser.hasNext()) {\r\n                let candidateCoverage = chooser.next();\r\n                let cost = candidateCoverage.cost(forConjunction);\r\n                if (cost < _cost) {\r\n                    _cost = cost;\r\n                    result = candidateCoverage;\r\n                }\r\n            }\r\n        } else {\r\n            throw '算力不足！'\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    Coverage\r\n}\r\n\r\n/*test push delete disjunct deleteAll\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nlet coverage1 = new Coverage();\r\ncoverage1.push(new Minterm('111'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\ncoverage1.push(new Minterm('111'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\ncoverage1.push(new Minterm('11*'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\ncoverage1.delete(new Minterm('111'));\r\nconsole.log(coverage1.mintermArray.map(v => v.value));\r\n\r\nlet coverage2 = new Coverage();\r\ncoverage1.push(new Minterm('000'));\r\ncoverage2.push(new Minterm('001'));\r\ncoverage2.push(new Minterm('101'));\r\nlet dis = coverage1.disjunct(coverage2);\r\nconsole.log(dis.mintermArray.map(v => v.value));\r\ndis.deleteAll(coverage1);\r\nconsole.log(dis.mintermArray.map(v => v.value));\r\n\r\n//test push delete disjunct deleteAll*/\r\n\r\n/*test conjunct conjunctPairwise\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nlet coverage1 = new Coverage();\r\ncoverage1.push(new Minterm('1**'))\r\ncoverage1.push(new Minterm('*1*'))\r\nlet coverage2 = new Coverage();\r\ncoverage2.push(new Minterm('*0*'))\r\ncoverage2.push(new Minterm('*10'))\r\nconsole.log(coverage1.conjunct(coverage2).mintermArray.map(v => v.value));\r\nlet coverage = coverage1.disjunct(coverage2);\r\nconsole.log(coverage.mintermArray.map(v => v.value));\r\nconsole.log(coverage.conjunctPairwise().mintermArray.map(v => v.value));\r\n//test conjunct conjunctPairwise*/\r\n\r\n/*test fullLargestCoverage simplify\r\nimport {Minterm} from \"@/logic/minterm\";\r\n\r\nlet coverage = new Coverage();\r\ncoverage.push(new Minterm('---'))\r\nconsole.log(coverage.fullLargestCoverage().mintermArray.map(v => v.value));\r\nconsole.log(coverage.simplify().mintermArray.map(v => v.value));\r\n//test fullLargestCoverage simplify*/","import {Coverage} from \"@/logic/coverage\";\r\nimport {AtomicProposition, Conjunction, Disjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass CoverageCreator {\r\n    constructor(mintermCreator = undefined) {\r\n        if (mintermCreator !== undefined) {\r\n            this.mintermCreator = mintermCreator;\r\n        }\r\n    }\r\n\r\n    createFromAssignments(assignments) {\r\n        let result = new Coverage();\r\n        assignments.forEach(assignment => {\r\n            result.push(this.mintermCreator.createFromAssignment(assignment));\r\n        });\r\n        return result;\r\n    }\r\n\r\n    createFromSimpleDisjunction(disjunction) {\r\n        let result = new Coverage();\r\n        switch (disjunction.constructor) {\r\n            case True:\r\n            case False:\r\n            case AtomicProposition:\r\n            case Negation:\r\n            case Conjunction:\r\n                result.push(this.mintermCreator.createFromSimpleConjunction(disjunction));\r\n                return result;\r\n            case Disjunction:\r\n                disjunction.disjuncts.forEach((disjunct => {\r\n                    result.push(this.mintermCreator.createFromSimpleConjunction(disjunct));\r\n                }))\r\n                return result;\r\n            default:\r\n                throw 'coverage create type error'\r\n        }\r\n    }\r\n}\r\n\r\nexport {CoverageCreator}\r\n\r\n/*test createFromAssignmentsF\r\nimport {Assignment} from \"@/logic/assignment\";\r\nimport {MintermCreator} from \"@/logic/minterm-creator\";\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('b');\r\norder.push('a');\r\norder.push('c');\r\nlet coverageCreator = new CoverageCreator(new MintermCreator(order));\r\nlet assignments = new Set();\r\nlet assignment1 = new Assignment();\r\nassignment1.set('a', false);\r\nassignment1.set('b', false);\r\nassignment1.set('c', false);\r\nassignments.add(assignment1);\r\n\r\nlet assignment2 = new Assignment();\r\nassignment2.set('a', false);\r\nassignment2.set('b', true);\r\nassignment2.set('c', false);\r\nassignments.add(assignment2);\r\nconsole.log(coverageCreator.createFromAssignments(assignments).mintermArray.map(v => v.value));\r\n//test createFromAssignments*/\r\n\r\n/*test createFromSimpleDisjunction\r\nimport compiler from \"@/logic/compiler\";\r\nimport {MintermCreator} from \"@/logic/minterm-creator\";\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet coverageCreator = new CoverageCreator(new MintermCreator(order));\r\nconsole.log(coverageCreator.createFromSimpleDisjunction(compiler.parse('a and b or true or false or a and c ')));\r\nconsole.log(coverageCreator.createFromSimpleDisjunction(compiler.parse('a and b')));\r\n\r\n//test createFromSimpleDisjunction*/\r\n","import {Minterm} from \"@/logic/minterm\";\r\nimport {AtomicProposition, Conjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass MintermCreator {\r\n    constructor(atomicPropositionOrder) {\r\n        this.atomicPropositionOrder = atomicPropositionOrder;\r\n    }\r\n\r\n    createFromAssignment(assignment) {\r\n        let length = this.atomicPropositionOrder.length;\r\n        let resultValue = '';\r\n        for (let i = 0; i < length; i++) {\r\n            let trueValue = assignment.get(this.atomicPropositionOrder.getValueOf(i));\r\n            //debug\r\n            if (trueValue === undefined) {\r\n                throw 'create minterm form assignment error';\r\n            }\r\n            //debug*/\r\n            resultValue += trueValue ? '1' : '0';\r\n        }\r\n        return new Minterm(resultValue);\r\n    }\r\n\r\n    createFromSimpleConjunction(conjunction) {\r\n        switch (conjunction.constructor) {\r\n            case True:\r\n                return new Minterm('*'.repeat(this.atomicPropositionOrder.length));\r\n            case False:\r\n                return new Minterm('-'.repeat(this.atomicPropositionOrder.length));\r\n            case AtomicProposition: {\r\n                let indexOfTrue = this.atomicPropositionOrder.getIndexOf(conjunction.name);\r\n                let mintermString = '';\r\n                for (let i = 0; i < this.atomicPropositionOrder.length; i++) {\r\n                    mintermString += i === indexOfTrue ? '1' : '*';\r\n                }\r\n                return new Minterm(mintermString);\r\n            }\r\n            case Negation: {\r\n                //debug\r\n                if (!(conjunction.item instanceof AtomicProposition)) {\r\n                    throw 'minterm create type error';\r\n                }\r\n                //debug*/\r\n                let indexOfTrue = this.atomicPropositionOrder.getIndexOf(conjunction.item.name);\r\n                let mintermString = '';\r\n                for (let i = 0; i < this.atomicPropositionOrder.length; i++) {\r\n                    mintermString += i === indexOfTrue ? '0' : '*';\r\n                }\r\n                return new Minterm(mintermString);\r\n            }\r\n            case Conjunction:\r\n                let mintermStringArray = '*'.repeat(this.atomicPropositionOrder.length).split('');\r\n                conjunction.conjuncts.forEach(conjunct => {\r\n                    if (conjunct instanceof AtomicProposition) {\r\n                        mintermStringArray[this.atomicPropositionOrder.getIndexOf(conjunct.name)] = '1';\r\n                    } else if ((conjunct instanceof Negation) && (conjunct.item instanceof AtomicProposition)) {\r\n                        mintermStringArray[this.atomicPropositionOrder.getIndexOf(conjunct.item.name)] = '0';\r\n                    }\r\n                    //debug\r\n                    else {\r\n                        throw 'minterm create error';\r\n                    }\r\n                    //debug*/\r\n                });\r\n                return new Minterm(mintermStringArray.join(''));\r\n        }\r\n    }\r\n}\r\n\r\nexport {MintermCreator}\r\n\r\n/*test createFromAssignment\r\nimport {StringOrder} from \"@/logic/string-order\";\r\n\r\nlet order = new StringOrder();\r\norder.push('b');\r\norder.push('a');\r\norder.push('c');\r\nlet assignment = new Assignment();\r\nassignment.set('a', true);\r\nassignment.set('b', false);\r\nassignment.set('c', true);\r\nconsole.log(new MintermCreator(order).createFromAssignment(assignment).value);\r\n//test createFromAssignment*/","import {Disjunction} from \"@/logic/well-formed\";\r\n\r\nclass CoverageWellFormedConvertor {\r\n    constructor(mintermWellFormedConvertor) {\r\n        this.mintermWellFormedConvertor = mintermWellFormedConvertor;\r\n    }\r\n\r\n    convertCoverageToDisjunction(coverage) {\r\n        if (coverage.length === 0) throw 'convertCoverageToDisjunction error';\r\n        if (coverage.length === 1) return this.mintermWellFormedConvertor.convertMintermToConjunction(coverage.mintermArray[0]);\r\n        let disjunctive = [];\r\n        coverage.mintermArray.forEach((minterm) => {\r\n            disjunctive.push(this.mintermWellFormedConvertor.convertMintermToConjunction(minterm));\r\n        });\r\n        return new Disjunction(...disjunctive);\r\n    }\r\n}\r\n\r\nexport {CoverageWellFormedConvertor}\r\n\r\n/*test convertCoverageToDisjunction\r\nimport {Coverage} from \"@/logic/coverage\";\r\nimport {Minterm} from \"@/logic/minterm\";\r\nimport {StringOrder} from \"@/logic/string-order\";\r\nimport {MintermWellFormedConvertor} from \"@/logic/minterm-well-formed-convertor\";\r\n\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet convertor = new CoverageWellFormedConvertor(new MintermWellFormedConvertor(order));\r\nlet coverage = new Coverage();\r\nconsole.log(convertor.convertCoverageToDisjunction(coverage).toString());\r\ncoverage.push(new Minterm('010'));\r\nconsole.log(convertor.convertCoverageToDisjunction(coverage).toString());\r\ncoverage.push(new Minterm('1*0'));\r\ncoverage.push(new Minterm('***'));\r\ncoverage.push(new Minterm('---'));\r\nconsole.log(convertor.convertCoverageToDisjunction(coverage).toString());\r\n//test convertCoverageToDisjunction*/","import {AtomicProposition, Conjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass MintermWellFormedConvertor {\r\n    constructor(atomicPropositionOrder) {\r\n        if (atomicPropositionOrder.length === 0) throw 'Minterm convert to wellformed error!'\r\n        this.atomicPropositionOrder = atomicPropositionOrder;\r\n    }\r\n\r\n    convertMintermToConjunction(minterm) {\r\n        let value = minterm.value;\r\n        if (value === '-'.repeat(value.length)) return new False();\r\n        if (value === '*'.repeat(value.length)) return new True();\r\n        let conjuncts = [];\r\n        for (let i = 0; i < value.length; i++) {\r\n            switch (value[i]) {\r\n                case '0':\r\n                    conjuncts.push(new Negation(new AtomicProposition(this.atomicPropositionOrder.getValueOf(i))));\r\n                    break;\r\n                case '1':\r\n                    conjuncts.push(new AtomicProposition(this.atomicPropositionOrder.getValueOf(i)));\r\n                    break;\r\n                case '*':\r\n                    break;\r\n                default:\r\n                    throw 'unknow char'\r\n            }\r\n        }\r\n        if (conjuncts.length === 1) {\r\n            return conjuncts[0];\r\n        }\r\n        return new Conjunction(...conjuncts);\r\n    }\r\n}\r\n\r\nexport {MintermWellFormedConvertor}\r\n\r\n/*test convertMintermToConjunction\r\nimport {StringOrder} from \"@/logic/string-order\";\r\nimport {Minterm} from \"@/logic/minterm\";\r\nlet order = new StringOrder();\r\norder.push('a');\r\norder.push('b');\r\norder.push('c');\r\nlet test = new Minterm('---');\r\nlet testCovertor = new MintermWellFormedConvertor(order);\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\ntest = new Minterm('***');\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\ntest = new Minterm('1*0');\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\ntest = new Minterm('110');\r\nconsole.log(testCovertor.convertMintermToConjunction(test).toString());\r\n//test convertMintermToConjunction*/","import {CoverageCreator} from \"@/logic/coverage-creator\";\r\nimport {MintermCreator} from \"@/logic/minterm-creator\";\r\nimport {Conjunction, Disjunction, False, IFF, Implication, Negation, True} from \"@/logic/well-formed\";\r\nimport {CoverageWellFormedConvertor} from \"@/logic/coverage-well-formed-convertor\";\r\nimport {MintermWellFormedConvertor} from \"@/logic/minterm-well-formed-convertor\";\r\nimport {TrueTable} from \"@/logic/true-table\";\r\n\r\nclass WellFormedSimplifier {\r\n    constructor(wellFormed) {\r\n        this.wellFormed = wellFormed;\r\n        let atomicPropositionOrder = wellFormed.atomicPropositionOrder;\r\n        this.atomicPropositionCount = atomicPropositionOrder.length;\r\n        if (atomicPropositionOrder.length === 0) return this;\r\n        this.coverageCreator = new CoverageCreator(new MintermCreator(atomicPropositionOrder));\r\n        this.coverageWellFormedConvertor = new CoverageWellFormedConvertor(new MintermWellFormedConvertor(atomicPropositionOrder));\r\n    }\r\n\r\n    get trueTable() {\r\n        if (this._trueTable === undefined) {\r\n            this._trueTable = new TrueTable(this.wellFormed);\r\n        }\r\n        return this._trueTable;\r\n    }\r\n\r\n    simplifyDisjunctiveTrueTableMethod() {\r\n        if (this.wellFormed instanceof True) {\r\n            throw 'getSimplifiedCoverageTrueTableMethod meet true error!'\r\n        }\r\n        if (this.wellFormed instanceof False) {\r\n            throw 'getSimplifiedCoverageTrueTableMethod meet false error!'\r\n        }\r\n        let assignmentsMakeWellFormedTrue = this.trueTable.getAssignmentsMakeWellFormedTrue();\r\n        if (assignmentsMakeWellFormedTrue.size === 0) {\r\n            return new False();\r\n        }\r\n        let coverage = this.coverageCreator.createFromAssignments(assignmentsMakeWellFormedTrue);\r\n        coverage = coverage.simplify();\r\n        return this.coverageWellFormedConvertor.convertCoverageToDisjunction(coverage);\r\n\r\n    }\r\n\r\n    simplifyDisjunctive() {\r\n        if (this.atomicPropositionCount === 0) return this.wellFormed.boolFunction() ? new True() : new False();\r\n        if (this.atomicPropositionCount < 8) {\r\n            return this.simplifyDisjunctiveTrueTableMethod();\r\n        } else {\r\n            switch (this.wellFormed.constructor) {\r\n                case Negation:\r\n                    return new WellFormedSimplifier(this.wellFormed.inward()).simplifyDisjunctive();\r\n                case Implication:\r\n                    return new WellFormedSimplifier(this.wellFormed.toDisjunction()).simplifyDisjunctive();\r\n                case IFF:\r\n                    return new WellFormedSimplifier(this.wellFormed.toConjunction()).simplifyDisjunctive();\r\n                case Conjunction: {\r\n                    let conjuncts = this.wellFormed.conjuncts;\r\n                    let length = conjuncts.length;\r\n                    let simplify1 = undefined;\r\n                    let simplify2 = undefined;\r\n                    let splitIndex = Math.floor(length / 2);\r\n                    if (length <= 3) {\r\n                        let split1 = conjuncts[0];\r\n                        simplify1 = new WellFormedSimplifier(split1).simplifyDisjunctive();\r\n                    } else {\r\n                        let split1 = new Conjunction(...conjuncts.slice(0, splitIndex));\r\n                        simplify1 = new WellFormedSimplifier(split1).simplifyDisjunctive();\r\n                    }\r\n                    if (length === 2) {\r\n                        let split2 = conjuncts[1];\r\n                        simplify2 = new WellFormedSimplifier(split2).simplifyDisjunctive();\r\n                    } else {\r\n                        let split2 = new Conjunction(...conjuncts.slice(splitIndex, length));\r\n                        simplify2 = new WellFormedSimplifier(split2).simplifyDisjunctive();\r\n                    }\r\n                    let coverageConjunted = this.coverageCreator.createFromSimpleDisjunction(simplify1).conjunct(this.coverageCreator.createFromSimpleDisjunction(simplify2));\r\n                    return this.coverageWellFormedConvertor.convertCoverageToDisjunction(coverageConjunted.simplify());\r\n                }\r\n                case Disjunction: {\r\n                    let disjuncts = this.wellFormed.disjuncts;\r\n                    let length = disjuncts.length;\r\n                    let simplify1 = undefined;\r\n                    let simplify2 = undefined;\r\n                    let splitIndex = Math.floor(length / 2);\r\n                    if (length <= 3) {\r\n                        simplify1 = new WellFormedSimplifier(disjuncts[0]).simplifyDisjunctive();\r\n                    } else {\r\n                        simplify1 = new WellFormedSimplifier(new Disjunction(...disjuncts.slice(0, splitIndex))).simplifyDisjunctive();\r\n                    }\r\n                    if (length === 2) {\r\n                        simplify2 = new WellFormedSimplifier(disjuncts[1]).simplifyDisjunctive();\r\n                    } else {\r\n                        simplify2 = new WellFormedSimplifier(new Disjunction(...disjuncts.slice(splitIndex, length))).simplifyDisjunctive();\r\n                    }\r\n                    let coverage1 = this.coverageCreator.createFromSimpleDisjunction(simplify1);\r\n                    let coverage2 = this.coverageCreator.createFromSimpleDisjunction(simplify2);\r\n                    let coverageDisjuncted = coverage1.disjunct(coverage2);\r\n                    return this.coverageWellFormedConvertor.convertCoverageToDisjunction(coverageDisjuncted.simplify());\r\n                }\r\n                default:\r\n                    throw 'type error';\r\n            }\r\n        }\r\n    }\r\n\r\n    simplifyConjunctive() {\r\n        let inversed = this.wellFormed.inverse();\r\n        let simplifiedInversed = new WellFormedSimplifier(inversed).simplifyDisjunctive();\r\n        return simplifiedInversed.inverse();\r\n    }\r\n}\r\n\r\nexport {WellFormedSimplifier}\r\n\r\n/*test simplifyDisjunctive simplifyConjunctive\r\nimport compiler from \"@/logic/compiler\";\r\n\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse('not b and c or a and b'));\r\n// console.log(wellFormedSimplifier.simplifyDisjunctive().toString());\r\n// console.log(wellFormedSimplifier.simplifyConjunctive().toString());\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse(\"a and (a <-> b) and (b<->c) and (c<->d) and (d<->e) and (e<->f) and (f<->g) and (h<->i) and (i<->j) and (j<->k) and (k<->l) and (l<->m) -> m\"));\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse(\" not a and not b or a and b or c -> d  \"));\r\n// let wellFormedSimplifier = new WellFormedSimplifier(compiler.parse('not(a ->b)'));\r\nconsole.log(wellFormedSimplifier.simplifyDisjunctive().toString());\r\nconsole.log(wellFormedSimplifier.simplifyConjunctive().toString());\r\n;\r\n//test simplifyDisjunctive simplifyConjunctive*/","import {AssignmentCreator} from \"@/logic/assignment-creator\";\r\nimport {WellFormedSimplifier} from \"@/logic/well-formed-simplifier\";\r\nimport {AtomicProposition, Conjunction, Disjunction, False, Negation, True} from \"@/logic/well-formed\";\r\n\r\nclass TrueTableShowable {\r\n    wellFormed;\r\n    head;\r\n    body;\r\n}\r\n\r\nclass TrueTable extends TrueTableShowable {\r\n    constructor(wellFormed) {\r\n        super();\r\n        this.wellFormed = wellFormed;\r\n        let atomicPropositionOrder = wellFormed.atomicPropositionOrder;\r\n        this.head = [];\r\n        this.head.push(...atomicPropositionOrder.stringArray);\r\n        this.head.push(wellFormed.toString());\r\n        this.trueValues = [];\r\n        this.body = [];\r\n        this.assignmentCreator = new AssignmentCreator(atomicPropositionOrder);\r\n        let atomicPropositionCount = atomicPropositionOrder.length;\r\n        if (atomicPropositionCount === 0) {\r\n            this.body.push(this.wellFormed.boolFunction() ? '1' : '0');\r\n            return this;\r\n        }\r\n        let rowCount = 2 ** atomicPropositionCount;\r\n        for (let i = 0; i < rowCount; i++) {\r\n            let assignment = this.assignmentCreator.createAssignmentFromIntValue(i);\r\n            let trueValue = wellFormed.boolFunction(assignment);\r\n            this.trueValues[i] = trueValue;\r\n            let row = i.toString(2).split('');\r\n            while (row.length < atomicPropositionCount) {\r\n                row.unshift('0');\r\n            }\r\n            row.push(trueValue ? '1' : '0');\r\n            this.body.push(row);\r\n        }\r\n\r\n    }\r\n\r\n    getAssignmentsMakeWellFormedTrue() {\r\n        let result = new Set();\r\n        this.trueValues.forEach((value, index) => {\r\n            if (value) {\r\n                result.add(this.assignmentCreator.createAssignmentFromIntValue(index));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nclass SimplifiedTrueTable extends TrueTableShowable {\r\n    constructor(wellFormed) {\r\n        super();\r\n        this.wellFormed = wellFormed;\r\n        let order = this.wellFormed.atomicPropositionOrder;\r\n        this.head = order.stringArray.map(v => v);\r\n        this.head.push(this.wellFormed.toString());\r\n        this.wellFormedSimplifier = new WellFormedSimplifier(wellFormed);\r\n        this.body = [];\r\n        let count = this.wellFormed.atomicPropositionOrder.length;\r\n        try {\r\n            let simplifiedDisjunction = this.wellFormedSimplifier.simplifyDisjunctive();\r\n            if (simplifiedDisjunction instanceof True) {\r\n                this.head = [this.wellFormed.toString()];\r\n                this.body.push(['1']);\r\n                return this;\r\n            }\r\n            if (simplifiedDisjunction instanceof False) {\r\n                this.body.push(['0']);\r\n                return this;\r\n            }\r\n            if (!(simplifiedDisjunction instanceof Disjunction)) {\r\n                simplifiedDisjunction.disjuncts = [simplifiedDisjunction];\r\n            }\r\n            simplifiedDisjunction.disjuncts.forEach(disjunct => {\r\n                let row = '*'.repeat(count).split('');\r\n                switch (disjunct.constructor) {\r\n                    case AtomicProposition:\r\n                        row[order.getIndexOf(disjunct.name)] = '1';\r\n                        break;\r\n                    case Negation:\r\n                        row[order.getIndexOf(disjunct.item.name)] = '0';\r\n                        break;\r\n                    case Conjunction:\r\n                        disjunct.conjuncts.forEach(conjunct => {\r\n                            switch (conjunct.constructor) {\r\n                                case AtomicProposition:\r\n                                    row[order.getIndexOf(conjunct.name)] = '1';\r\n                                    break;\r\n                                case Negation:\r\n                                    row[order.getIndexOf(conjunct.item.name)] = '0';\r\n                                    break;\r\n                                default:\r\n                                    throw 'simplified true table error';\r\n                            }\r\n                        });\r\n                        break;\r\n                    default:\r\n                        throw 'simplified true table error';\r\n                }\r\n                row.push('1')\r\n                this.body.push(row);\r\n            });\r\n        } catch (e) {\r\n        }\r\n\r\n        try {\r\n            let simplifiedConjunction = this.wellFormedSimplifier.simplifyConjunctive();\r\n            if (simplifiedConjunction instanceof True) {\r\n                this.head = [this.wellFormed.toString()];\r\n                this.body.push(['1']);\r\n                return this;\r\n            }\r\n            if (simplifiedConjunction instanceof False) {\r\n                this.body.push(['0']);\r\n                return this;\r\n            }\r\n            if (!(simplifiedConjunction instanceof Conjunction)) {\r\n                simplifiedConjunction.constructs = [simplifiedConjunction];\r\n            }\r\n            simplifiedConjunction.conjuncts.forEach((conjunct) => {\r\n                let row = '*'.repeat(count).split('');\r\n                switch (conjunct.constructor) {\r\n                    case AtomicProposition:\r\n                        row[order.getIndexOf(conjunct.name)] = '0';\r\n                        break;\r\n                    case Negation:\r\n                        row[order.getIndexOf(conjunct.item.name)] = '1';\r\n                        break;\r\n                    case Disjunction:\r\n                        conjunct.disjuncts.forEach(disjunct => {\r\n                            switch (disjunct.constructor) {\r\n                                case AtomicProposition:\r\n                                    row[order.getIndexOf(disjunct.name)] = '0';\r\n                                    break;\r\n                                case Negation:\r\n                                    row[order.getIndexOf(disjunct.item.name)] = '1';\r\n                                    break;\r\n                                default :\r\n                                    throw 'simplified true table error';\r\n                            }\r\n                        });\r\n                        break;\r\n                    default:\r\n                        throw 'simplified true table error'\r\n                }\r\n                row.push('0');\r\n                this.body.push(row);\r\n            });\r\n        } catch (e) {\r\n        }\r\n    }\r\n}\r\n\r\nexport {TrueTable, TrueTableShowable, SimplifiedTrueTable}\r\n\r\n/*test all\r\nimport compiler from \"@/logic/compiler\";\r\n\r\nlet trueTable = new TrueTable(compiler.parse('a and b'));\r\nconsole.log(trueTable);\r\nconsole.log(trueTable.getAssignmentsMakeWellFormedTrue());\r\ntrueTable = new TrueTable(compiler.parse('true'));\r\nconsole.log(trueTable);\r\nconsole.log(trueTable.getAssignmentsMakeWellFormedTrue());\r\ntrueTable = new TrueTable(compiler.parse('false'));\r\nconsole.log(trueTable);\r\nconsole.log(trueTable.getAssignmentsMakeWellFormedTrue());\r\n//test all*/\r\n\r\n//test SimplifiedTrueTable\r\nimport compiler from \"@/logic/compiler\";\r\n\r\nconsole.log(new SimplifiedTrueTable(compiler.parse('a and b')));\r\n//test SimplifiedTrueTable*/","import compiler from \"@/logic/compiler\";\r\nimport {SimplifiedTrueTable, TrueTable} from \"@/logic/true-table\";\r\nimport {WellFormedSimplifier} from \"@/logic/well-formed-simplifier\";\r\n\r\nclass WellFormedUtil {\r\n    constructor(str) {\r\n        this.wellFormed = compiler.parse(str);\r\n        this.simplifier = new WellFormedSimplifier(this.wellFormed);\r\n        this.simplifiedTrueTable = new SimplifiedTrueTable(this.wellFormed);\r\n    }\r\n\r\n    get trueTable() {\r\n        if (this._trueTable === undefined) {\r\n            this._trueTable = new TrueTable(this.wellFormed);\r\n        }\r\n        return this._trueTable;\r\n    }\r\n\r\n    formulaString() {\r\n        return this.wellFormed.toString();\r\n    }\r\n\r\n    simplifiedDisjunctionString() {\r\n        try {\r\n            return this.simplifier.simplifyDisjunctive().toString();\r\n        } catch (e) {\r\n            return '算力不足无法计算！';\r\n        }\r\n\r\n    }\r\n\r\n    simplifiedConjunctionString() {\r\n        try {\r\n            return this.simplifier.simplifyConjunctive().toString();\r\n        } catch (e) {\r\n            return '算力不足无法计算！';\r\n        }\r\n    }\r\n\r\n    trueTableShowAble() {\r\n        return this.wellFormed.atomicPropositionOrder.length < 6;\r\n    }\r\n}\r\n\r\nexport {\r\n    WellFormedUtil\r\n}","<template>\r\n  <div>\r\n    <div>\r\n      <input id=\"formula_input\" type=\"text\" v-model.lazy=\"input\">\r\n      <button id=\"formula_submit\" @click=\"submitFormula\">确定</button>\r\n    </div>\r\n    <div id=\"formula_show\">\r\n      <div>识别到公式：{{ wellFormedUtil.formulaString() }}</div>\r\n      <div>最简合取式：{{ wellFormedUtil.simplifiedConjunctionString() }}</div>\r\n      <div>最简析取式：{{ wellFormedUtil.simplifiedDisjunctionString() }}</div>\r\n    </div>\r\n    <div>\r\n      <div v-if=\"wellFormedUtil.trueTableShowAble()\">\r\n        <div>原始真值表</div>\r\n        <table class=\"true_table\">\r\n          <th v-for=\"th in wellFormedUtil.trueTable.head\">{{ th }}</th>\r\n          <tr v-for=\"tr in wellFormedUtil.trueTable.body\">\r\n            <td v-for=\"td in tr\">{{ td }}</td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n      <div v-else>\r\n        原始真值表过长，请参考以下简化的真值表：\r\n      </div>\r\n      <div>\r\n        <div>简化的真值表</div>\r\n        <table class=\"true_table\">\r\n          <th v-for=\"th in wellFormedUtil.simplifiedTrueTable.head\">\r\n            {{ th }}\r\n          </th>\r\n          <tr v-for=\"tr in wellFormedUtil.simplifiedTrueTable.body\">\r\n            <td v-for=\"td in tr\">\r\n              {{ td }}\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport {WellFormedUtil} from \"@/logic/well-formed-util\";\r\n\r\nexport default {\r\n  name: \"LogicTool\",\r\n  data() {\r\n    return {\r\n      input: \"a and b\",\r\n      wellFormedUtil: new WellFormedUtil('a and b')\r\n    }\r\n  },\r\n  methods: {\r\n    submitFormula() {\r\n      this.wellFormedUtil = null;\r\n      this.wellFormedUtil = new WellFormedUtil(this.input);\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n#formula_input {\r\n  width: 30%;\r\n  margin: 6px;\r\n}\r\n\r\n#formula_submit {\r\n  width: 5%;\r\n  margin: 6px;\r\n}\r\n\r\n#formula_show {\r\n  margin: 10px;\r\n  font-size: 20px;\r\n}\r\n\r\n.true_table {\r\n  margin: 0 auto;\r\n}\r\n\r\n.true_table,\r\n.true_table th,\r\n.true_table td {\r\n  text-align: center;\r\n  border-bottom: 1px solid rgb(161, 159, 159);\r\n}\r\n\r\n.true_table th,\r\n.true_table td {\r\n  padding: 0 10px;\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./LogicTool.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./LogicTool.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./LogicTool.vue?vue&type=template&id=b1f771ca&\"\nimport script from \"./LogicTool.vue?vue&type=script&lang=js&\"\nexport * from \"./LogicTool.vue?vue&type=script&lang=js&\"\nimport style0 from \"./LogicTool.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport LogicTool from \"@/views/LogicTool\";\n\nVue.use(VueRouter)\n\nconst routes = [\n    {\n        path: '/',\n        name: 'logicTool',\n        component: LogicTool,\n    },\n    {\n        path: '/about',\n        name: 'about',\n        // route level code-splitting\n        // this generates a separate chunk (about.[hash].js) for this route\n        // which is lazy-loaded when the route is visited.\n        component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n    }\n]\n\nconst router = new VueRouter({\n    routes\n})\n\nexport default router\n","import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n  },\n  getters: {\n  },\n  mutations: {\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store'\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  router,\r\n  store,\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + \"about\" + \".\" + \"f20268a9\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"logic-workstation:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunklogic_workstation\"] = self[\"webpackChunklogic_workstation\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(1926); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","_v","staticRenderFns","component","directives","name","rawName","value","expression","modifiers","domProps","on","$event","input","target","submitFormula","_s","wellFormedUtil","formulaString","simplifiedConjunctionString","simplifiedDisjunctionString","trueTableShowAble","staticClass","_l","trueTable","th","tr","td","simplifiedTrueTable","StringOrder","Map","length","stringArray","push","stringIndexMap","has","set","pushAll","stringOrder","forEach","string","getIndexOf","get","getValueOf","index","WellFormed","atomicPropositionOrder","undefined","date","getDefaultAtomicPropositionOrder","inverse","Negation","inward","boolFunction","assignment","toStringInside","wellFormed","toString","True","constructor","super","instance","False","AtomicProposition","order","item","Conjunction","Disjunction","conjuncts","map","conjunct","disjuncts","disjunct","Implication","antecedent","consequent","IFF","condition1","condition2","some","join","toDisjunction","toConjunction","compiler","o","k","v","l","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","parser","trace","yy","symbols_","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","enclosed","table","defaultActions","parseError","str","hash","recoverable","error","Error","parse","self","stack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","symbol","preErrorSymbol","state","action","r","p","len","newState","expected","lex","token","yyval","errStr","showPosition","text","match","line","loc","Array","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","exports","Assignment","getIntValue","trueValue","atomic","AssignmentCreator","createAssignmentFromIntValue","intValue","binaryValueArray","unshift","CoveragesChooser","coverages","current","total","lengths","coverage","choose","hasNext","result","Coverage","mintermArray","Minterm","equals","minterm","isFALSE","repeat","resultValue","this_i","minterm_i","starCount","count","combineSub","tag","cost","forConjunction","_cost","negate","valueArray","newValue","Set","mintermValueSet","add","size","minterm1","minterm2","delete","findIndex","m","splice","deleteAll","fullLargestCoverage","startIndexes","toDelete","j","minterm_j","isIntersectedWith","forConjuncion","simplify","forConjunctive","conjunctPairwise","ConjunctPairwise","getLargestMultiOccupiedCoverage","deleteAllEntriesWhichValuesIntersectedWith","minimalCoverage","mintermLength","coverageMultiOccupied","mintermMultiOccupied","key","param","Number","MAX_SAFE_INTEGER","chooser","candidateCoverage","CoverageCreator","mintermCreator","createFromAssignments","assignments","createFromAssignment","createFromSimpleDisjunction","disjunction","createFromSimpleConjunction","MintermCreator","conjunction","indexOfTrue","mintermString","mintermStringArray","CoverageWellFormedConvertor","mintermWellFormedConvertor","convertCoverageToDisjunction","convertMintermToConjunction","disjunctive","MintermWellFormedConvertor","WellFormedSimplifier","atomicPropositionCount","coverageCreator","coverageWellFormedConvertor","_trueTable","TrueTable","simplifyDisjunctiveTrueTableMethod","assignmentsMakeWellFormedTrue","getAssignmentsMakeWellFormedTrue","simplifyDisjunctive","simplify1","simplify2","splitIndex","floor","split1","split2","coverageConjunted","coverage1","coverage2","coverageDisjuncted","simplifyConjunctive","inversed","simplifiedInversed","TrueTableShowable","head","trueValues","body","assignmentCreator","rowCount","row","SimplifiedTrueTable","wellFormedSimplifier","simplifiedDisjunction","e","simplifiedConjunction","constructs","console","log","WellFormedUtil","simplifier","data","methods","Vue","VueRouter","routes","path","LogicTool","router","Vuex","getters","mutations","actions","modules","store","h","App","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","keys","every","getter","__esModule","d","a","definition","defineProperty","enumerable","f","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","Function","window","obj","prop","inProgress","dataWebpackPrefix","url","script","needAttach","scripts","document","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","type","appendChild","Symbol","toStringTag","installedChunks","installedChunkData","promise","resolve","loadingEnded","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}